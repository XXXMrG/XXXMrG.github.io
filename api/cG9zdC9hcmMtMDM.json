{"title":"如何速成前端三件套 （CSS）","date":"2019-03-19T15:08:33.000Z","link":"post/arc-03","tags":["front_end"],"categories":["前端"],"updated":"2019-03-24T02:26:04.933Z","content":"<hr>\n<h2 id=\"常用属性\">常用属性<a href=\"post/arc-03#常用属性\"></a></h2><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/19/5c91063a9a96f.png\" alt=\"5c91063a9a96f.png\" data-zoomable></p></div>\n<h2 id=\"层叠次序\">层叠次序<a href=\"post/arc-03#层叠次序\"></a></h2><p>一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。</p>\n<ol>\n<li>浏览器缺省设置</li>\n<li>外部样式表</li>\n<li>内部样式表（位于 <head><meta name=\"generator\" content=\"Hexo 3.8.0\"> 标签内部）</head></li>\n<li>内联样式（在 HTML 元素内部）</li>\n</ol>\n<p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明：<head><meta name=\"generator\" content=\"Hexo 3.8.0\"> 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。</head></p>\n<h2 id=\"盒模型\">盒模型<a href=\"post/arc-03#盒模型\"></a></h2><p><em>every element in web design is a rectangular box</em></p>\n<p>盒模型(box model)是CSS中的一个重要概念，它是元素大小的呈现方式。</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/19/5c91064a10363.png\" alt=\"5c91064a10363.png\" data-zoomable></p></div>\n<p>CSS3中新增了一种盒模型计算方式：box-sizing熟悉。盒模型默认的值是content-box, 新增的值是padding-box和border-box，几种盒模型计算元素宽高的区别如下：</p>\n<p><strong>content-box（默认）</strong></p>\n<p>布局所占宽度Width：<br>Width = width + padding-left + padding-right + border-left + border-right<br>布局所占高度Height:<br>Height = height + padding-top + padding-bottom + border-top + border-bottom</p>\n<p><strong>padding-box</strong></p>\n<p>布局所占宽度Width：<br>Width = width(包含padding-left + padding-right) + border-top + border-bottom<br>布局所占高度Height:<br>Height = height(包含padding-top + padding-bottom) + border-top + border-bottom</p>\n<p><strong>border-box</strong></p>\n<p>布局所占宽度Width：<br>Width = width(包含padding-left + padding-right + border-left + border-right)<br>布局所占高度Height:<br>Height = height(包含padding-top + padding-bottom + border-top + border-bottom)</p>\n<p><strong>margin叠加</strong></p>\n<p>外边距叠加是一个相当简单的概念。 但是，在实践中对网页进行布局时， 它会造成许多混淆。 简单的说， 当两个或更多个垂直边距相遇时， 它们将形成一个外边距。这个外边距的高度等于两个发生叠加的外边距的高度中的较大者。但是注意只有普通文档流中块框的垂直外边距才会发生外边距叠加。 行内框、 浮动框或绝对定位框之间的外边距不会叠加。<br>一般来说， 垂直外边距叠加有三种情况：</p>\n<ul>\n<li>元素自身叠加 当元素没有内容（即空元素）、内边距、边框时， 它的上下边距就相遇了， 即会产生叠加（垂直方向）。 当为元素添加内容、 内边距、 边框任何一项， 就会取消叠加。</li>\n<li>相邻元素叠加 相邻的两个元素， 如果它们的上下边距相遇，即会产生叠加。</li>\n<li>包含（父子）元素叠加 包含元素的外边距隔着 父元素的内边距和边框， 当这两项都不存在的时候， 父子元素垂直外边距相邻， 产生叠加。 添加任何一项即会取消叠加。</li>\n</ul>\n<h2 id=\"CSS-普通流（文档流）\">CSS 普通流（文档流）<a href=\"post/arc-03#CSS-普通流（文档流）\"></a></h2><p>什么是普通流？简单说就是元素按照其在 HTML 中的位置顺序决定排布的过程。并且这种过程遵循标准的描述。</p>\n<p>一般使用margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“距离”。<br>只要不是float和绝对定位方式布局的，都在普通流里面。</p>\n<h2 id=\"CSS-定位方式\">CSS 定位方式<a href=\"post/arc-03#CSS-定位方式\"></a></h2><h3 id=\"display-属性\">display 属性<a href=\"post/arc-03#display-属性\"></a></h3><p>每一个元素都有默认的display属性，使用最多的是 block,inline 和 inline-block，不常用的是 table-cell。<br>根据 display 属性，我们可以将元素分为块级元素(block)和内联级元素(inline)。它们最大区别是:block元素可以设置宽度，独占一行。inline元素宽度由内容决定，与其他元素并列在一行。<br>常见的block属性元素有：div, h1-h6, ul, li, ol, dl, dd, dt。<br>常见的inline属性元素有:span, a, em。</p>\n<p><strong>block</strong></p>\n<p>宽高可以自行设置，默认宽度由父容器决定，默认高度由内容决定，自己独占一行。</p>\n<p><strong>inline</strong></p>\n<p>宽度和高度都由内容决定，与其他元素共占一行</p>\n<p><strong>inline-block</strong></p>\n<p>宽度可以自行设置，类似block，但是与其他元素共占一行，类似inline。长用于设置垂直居中。</p>\n<p><strong>table-cell</strong></p>\n<p>此属性指让标签元素以表格单元格的形式呈现，单元格有一些比较特殊的属性，可以设置元素的垂直居中等。</p>\n<h3 id=\"position-属性\">position 属性<a href=\"post/arc-03#position-属性\"></a></h3><p>元素在页面中的布局遵守一套文档流的方式，默认的定位属性值为static。它其实是未被设置定位的。<br>元素如果被定位了，那么它的top,left,bottom,right值就会生效，能设置定位的属性是relative,absolute和fixed。<br>需要注意的另一点是被定位的元素层次(z-index)会得到提高。</p>\n<p><strong>relative（相对定位）</strong></p>\n<p>设置了相对定位之后，通过修改top,left,bottom,right值，元素会在自身文档流所在位置上被移动，其他的元素则不会调整位置来弥补它偏离后剩下的空隙。</p>\n<p><strong>absolute（绝对定位）</strong></p>\n<p>设置了绝对定位之后，元素脱离文档流，其他的元素会调整位置来弥补它偏离后剩下的空隙。元素偏移是相对于离它最近的设置了定位属性（position值不为static）的元素。<br>且如果元素为块级元素（display属性值为block)，那么它的宽度也会由内容撑开。因为：<br>默认文档流中块级元素如果没有设置宽度属性，会自动填满整行。</p>\n<p><strong>fixed(固定定位)</strong></p>\n<p>设置了固定定位之后，元素相对的偏移的参考是可视窗口，即使页面滚动，元素仍然会在固定位置。</p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2010/12/css-%E7%9B%B8%E5%AF%B9%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">CSS 相对|绝对(relative/absolute)定位系列</a></p>\n<h2 id=\"CSS-浮动相关\">CSS 浮动相关<a href=\"post/arc-03#CSS-浮动相关\"></a></h2><p>这也是CSS定位机制的一种。<br>首先了解两个概念：</p>\n<ol>\n<li>文档流：文档流是文档中可显示对象在排列时所占用的位置。</li>\n<li><p>浮动的定义：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来。<br>浮动的实际用途，可设置文字环绕或使元素宽度由内容填充（类似Inline-block)。使用浮动需要注意的是如果浮动的元素高度比父级容器还高，那么需要设置父级容器的overflow属性为auto,使其自动撑满。</p>\n<p><a href=\"http://www.iyunlu.com/view/css-xhtml/55.html\" target=\"_blank\" rel=\"noopener\">CSS 浮动</a> </p>\n</li>\n</ol>\n<h2 id=\"CSS-选择器\">CSS 选择器<a href=\"post/arc-03#CSS-选择器\"></a></h2><p>选择器是匹配元素的一种模式，不只是在CSS中，JavaScript对CSS的选择器也是支持的，比如<code>document.document.querySelectorAll。</code></p>\n<h3 id=\"CSS-解析器\">CSS 解析器<a href=\"post/arc-03#CSS-解析器\"></a></h3><p>HTML 经过解析生成 DOM Tree（这个我们比较熟悉）；而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。<br>Render Tree 中的元素（WebKit 中称为「renderers」，Firefox 下为「frames」）与 DOM 元素相对应，但非一一对应：一个 DOM 元素可能会对应多个 renderer，如文本折行后，不同的「行」会成为 render tree 种不同的 renderer。也有的 DOM 元素被 Render Tree 完全无视，比如 display:none 的元素。<br>在建立 Render Tree 时（WebKit 中的「Attachment」过程），<strong>浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 renderer。对于每个 DOM 元素，必须在所有 Style Rules 中找到符合的 selector 并将对应的规则进行合并。选择器的「解析」实际是在这里执行的</strong>，在遍历 DOM Tree 时，从 Style Rules 中去寻找对应的 selector。</p>\n<p><strong>解析顺序</strong><br>CSS匹配不是从左到右进行查找，而是从右到左进行查找。如果从左到右的顺序，那么每条选择器都需要遍历整个DOM树，性能很受影响。所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找, 所以选择器最好写的简洁一点。</p>\n<h3 id=\"选择器权重\">选择器权重<a href=\"post/arc-03#选择器权重\"></a></h3><p>权重，也就是选择器的优先级，每条选择器的规则都有其权重，权重大的会覆盖掉权重小的，很多CSS出现问题的场景，都是某处定义了一个更高权重的规则，导致此处规则不生效。<br>根据样式所在位置，对元素的影响也有关系：内联样式（标签内style形式） &gt; style标签 &gt; link标签。<br>另外一点需要注意的是!improtant,凡是属性值后加上了!important，那么它的值不会被其他值替换。</p>\n<p><strong>权重的计算</strong></p>\n<p>主要的规则就是:<br>id选择器 &gt; 类，属性选择器和伪类选择器 &gt; 元素和伪元素</p>\n<p><strong>基本选择器</strong></p>\n<ul>\n<li>通配符选择器（＊）</li>\n<li>id选择器（#ID）</li>\n<li>类选择器（.className）</li>\n<li>元素选择器(E)</li>\n<li>后代选择器（Ｅ Ｆ）</li>\n<li>子元素选择器(E&gt;F)</li>\n<li>相邻兄弟元素选择器(E + F)</li>\n<li>群组选择器（selector1,selector2,…,selectorN）</li>\n</ul>\n<p><strong>属性选择器</strong><br>使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。</p>\n<ul>\n<li>E[attr]：只使用属性名，但没有确定任何属性值</li>\n<li>E[attr=“value”]：指定属性名，并指定了该属性的属性值</li>\n<li>E[attr~=“value”]：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写</li>\n<li>E[attr^=“value”]：指定了属性名，并且有属性值，属性值是以value开头的；</li>\n<li>E[attr$=“value”]：指定了属性名，并且有属性值，而且属性值是以value结束的；</li>\n<li>E[attr*=“value”]：指定了属性名，并且有属性值，而且属值中包含了value；</li>\n<li>E[attr|=“value”]：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;</li>\n</ul>\n<p><strong>伪类选择器</strong><br>伪类选择器的形式就是:xxx， 比如:hover, :link, :nth。</p>\n<p><strong>动态伪类</strong><br>这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如”:link”,”:visited”;另外一种被称作用户行为伪类，如“:hover”,”:active”和”:focus”。先来看最常见的锚点伪类。</p>\n<ul>\n<li>hover: 用于当用户把鼠标移动到元素上面时的效果</li>\n<li>active: 用于用户点击元素那一下的效果（正发生在点的那一下，松开鼠标左键此动作也就完成了）</li>\n<li>focus: 用于元素成为焦点，这个经常用在表单元素上</li>\n</ul>\n<p><strong>UI元素状态伪类</strong></p>\n<p>主要是针对于HTML中的Form元素操作，IE8 不支持 <code>:checked, :enabled, :disabed</code>  这三种选择器。</p>\n<p><strong>CSS3的:nth选择器</strong><br>主要注意的是CSS3添加的nth选择器在IE8下不支持。</p>\n<ul>\n<li>fist-child: 选择某个元素的第一个子元素；</li>\n<li>last-child: 选择某个元素的最后一个子元素；</li>\n<li>nth-child(): 选择某个元素的一个或多个特定的子元素；</li>\n<li>其他： 常用的就是上面三种了，其他自行了解。</li>\n</ul>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/19/5c91068c68726.jpg\" alt=\"5c91068c68726.jpg\" data-zoomable></p></div>\n<h2 id=\"CSS-布局\">CSS 布局<a href=\"post/arc-03#CSS-布局\"></a></h2><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/19/5c91069937d5c.png\" alt=\"5c91069937d5c.png\" data-zoomable></p></div>\n<p><strong>固定尺寸布局</strong><br>可以从固定尺寸先了解，先构思好页面的主要结构，做动画的元素一般需要绝对定位，方便操作移动。</p>\n<p><strong>自适应布局</strong><br>响应式的布局的结构其实就是多个固定尺寸的组合，元素的宽度，字体的大小一般会以半分比的形式设置。通过媒体查询进行不同分辨率下的布局。</p>\n<p><a href=\"http://blog.jobbole.com/46574/\" target=\"_blank\" rel=\"noopener\">如何只用CSS做到完全居中 - 文章 - 伯乐在线</a></p>\n<h2 id=\"Meta\">Meta<a href=\"post/arc-03#Meta\"></a></h2><p>meta 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键字），或其他 web 服务。</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/19/5c9106a48ee0d.png\" alt=\"5c9106a48ee0d.png\" data-zoomable></p></div>\n<h2 id=\"BEM\">BEM<a href=\"post/arc-03#BEM\"></a></h2><p><em>BEM (Block, Element, Modifier)</em></p>\n<p>是一种基于组件的对 CSS 类名进行约定的 Web 开发方法。他<strong>通过定义命名空间来解决权重问题</strong>，从而使 CSS 更易于维护。<br>BEM 使用 Block、Element、Modifier 来解释其结构。<br>Block 是一个可跨项目重用的独立组件，且是子组件（Element）的“命名空间”。Modifier 可标示 Block 或 Element 处于某种状态、结构或特定的样式。</p>\n<ul>\n<li>-中划线 ：仅作为连字符使用，表示多个单词之间的连接记号</li>\n<li>__双下划线：用来连接 Block 和 Element</li>\n<li>—双中划线：描述 Block 或 Element 的一种状态、结构或样式</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* block component */</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-name</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* element */</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-name__element-name</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* modifier */</span></span><br><span class=\"line\"><span class=\"selector-class\">.block-name__element-name--modifier-name</span> &#123;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;nav class=\"navbar\"&gt;</span><br><span class=\"line\">    &lt;a href=\"/\" class=\"navbar__link navbar__link--active\"&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;a href=\"/\" class=\"navbar__link\"&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/nav&gt;</span><br></pre></td></tr></table></div></figure>\n<p>在示例中，<code>navbar</code> 为 Block，<br><code>navbar__link</code> 是一个不能独立与<code>navbar</code> 存在的 Element，<code>navbar__link--active</code>是标明<code>navbar__link</code> 不同状态的 Modifier。</p>\n<ul>\n<li>BEM 实践中也有使用_替代—的情况</li>\n<li>类命名需要尽可能的简明清晰、没有二意性，例如error就比red-text更加有语义。</li>\n<li><p>建议 Block 只能有一层 Element 嵌套，且 Element 不能独立 Block 存在。如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form__content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form__input\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 错误：建议使用 `search-form__button` 或 `search-form__content-button` --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form__content__button\"</span>&gt;</span>Search<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 错误：该 Element 应放在 `search-form` Block 中 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form__icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建议同一个 Block 或 Element 上不能使用两个以上的 Modifier 去进行修饰，且 Modifier 需配合 Block 或 Element 使用，不能独立存在。如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 错误：缺少 `search-form` Block --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form_theme_islands\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 错误：使用多个 Modifier --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-form search-form_theme_islands search-form_theme_lite\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"那些你不知道的属性\">那些你不知道的属性<a href=\"post/arc-03#那些你不知道的属性\"></a></h2><p><code>margin padding border</code>     </p>\n<p>这些如果同时设置四个方向上的值的话，顺序应当是顺时针的。</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/19/5c9106b48e3b3.png\" alt=\"5c9106b48e3b3.png\" data-zoomable></p></div>\n<p>TBD…</p>\n<h2 id=\"Reference\">Reference<a href=\"post/arc-03#Reference\"></a></h2><p><a href=\"https://www.gitbook.com/book/leohxj/front-end-database\" target=\"_blank\" rel=\"noopener\">前端工程师手册 · GitBook (Legacy)</a></p>\n","prev":{"title":"TCP or UDP ?","link":"post/arc-04"},"next":{"title":"计算机网络体系结构","link":"post/arc-02"},"plink":"https://xkeith.space/post/arc-03/","toc":[{"title":"常用属性","id":"常用属性","index":"1"},{"title":"层叠次序","id":"层叠次序","index":"2"},{"title":"盒模型","id":"盒模型","index":"3"},{"title":"CSS 普通流（文档流）","id":"CSS-普通流（文档流）","index":"4"},{"title":"CSS 定位方式","id":"CSS-定位方式","index":"5","children":[{"title":"display 属性","id":"display-属性","index":"5.1"},{"title":"position 属性","id":"position-属性","index":"5.2"}]},{"title":"CSS 浮动相关","id":"CSS-浮动相关","index":"6"},{"title":"CSS 选择器","id":"CSS-选择器","index":"7","children":[{"title":"CSS 解析器","id":"CSS-解析器","index":"7.1"},{"title":"选择器权重","id":"选择器权重","index":"7.2"}]},{"title":"CSS 布局","id":"CSS-布局","index":"8"},{"title":"Meta","id":"Meta","index":"9"},{"title":"BEM","id":"BEM","index":"10"},{"title":"那些你不知道的属性","id":"那些你不知道的属性","index":"11"},{"title":"Reference","id":"Reference","index":"12"}]}