{"title":"TCP or UDP ?","date":"2019-03-20T07:03:45.000Z","link":"post/arc-04","tags":["network"],"categories":["计算机网络"],"updated":"2019-03-20T07:06:12.246Z","content":"<hr>\n<h2 id=\"TCP-IP-网络模型\">TCP / IP 网络模型<a href=\"post/arc-04#TCP-IP-网络模型\"></a></h2><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。</p>\n<p>TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</p>\n<p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p>\n<ul>\n<li>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</li>\n<li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li>\n<li>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li>\n<li>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</li>\n</ul>\n<p>在网络体系结构中网络通信的建立必须是在通信双方的对等层进行，不能交错。 在整个数据传输过程中，数据在发送端时经过各层时都要附加上相应层的协议头和协议尾（仅数据链路层需要封装协议尾）部分，也就是要对数据进行协议封装，以标识对应层所用的通信协议。<br>TCP 和 UDP 就是 TCP/IP 中两个具有代表性的传输层协议。</p>\n<h2 id=\"TCP\">TCP<a href=\"post/arc-04#TCP\"></a></h2><p><em>Transmission Control Protocol</em></p>\n<p>当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如，当你想查看网页或查看电子邮件时，希望完整且按顺序查看网页，而不丢失任何内容。当你下载文件时，希望获得的是完整的文件，而不仅仅是文件的一部分，因为如果数据丢失或乱序，都不是你希望得到的结果，于是就用到了TCP。<br>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</p>\n<h3 id=\"连接过程\">连接过程<a href=\"post/arc-04#连接过程\"></a></h3><h4 id=\"三次握手🤝\">三次握手🤝<a href=\"post/arc-04#三次握手🤝\"></a></h4><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/20/5c91e62840681.jpg\" alt=\"5c91e62840681.jpg\" data-zoomable></p></div>\n<ul>\n<li><strong>第一次握手：</strong>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li>\n<li><strong>第二次握手：</strong>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li>\n<li><strong>第三次握手：</strong>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。<br>这里可能大家会有个疑惑：为什么 TCP 建立连接需要三次握手，而不是两次？这是因为第三次握手为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。</li>\n</ul>\n<h4 id=\"四次挥手🙋‍♂️\">四次挥手🙋‍♂️<a href=\"post/arc-04#四次挥手🙋‍♂️\"></a></h4><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/20/5c91e638c336b.jpg\" alt=\"5c91e638c336b.jpg\" data-zoomable></p></div>\n<p>TCP 是<strong>全双工</strong>的，在断开连接时两端都需要发送 FIN 和 ACK。</p>\n<ul>\n<li><strong>第一次挥手：</strong>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</li>\n<li><strong>第二次挥手：</strong>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。</li>\n<li><strong>第三次挥手：</strong>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</li>\n<li><strong>第四次挥手：</strong>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</li>\n</ul>\n<h3 id=\"特点\">特点<a href=\"post/arc-04#特点\"></a></h3><ul>\n<li><strong>面向连接：</strong>面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。</li>\n<li><strong>仅支持单播传输：</strong>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</li>\n<li><strong>面向字节流：</strong>TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。</li>\n<li><strong>可靠传输：</strong>对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。</li>\n<li><strong>提供拥塞控制：</strong>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。</li>\n<li><strong>TCP提供全双工通信：</strong>TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）。</li>\n</ul>\n<h2 id=\"UDP\">UDP<a href=\"post/arc-04#UDP\"></a></h2><p><em>User Datagram Protocol</em><br>用户数据报协议</p>\n<h3 id=\"特点-1\">特点<a href=\"post/arc-04#特点-1\"></a></h3><ol>\n<li>面向无连接</li>\n</ol>\n<p>不需要像 TCP 一样通过三次握手建立连接，想发就发，而且也不对数据报文进行任何处理。</p>\n<p>具体来说就是：</p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了；</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作。</li>\n</ul>\n<ol start=\"2\">\n<li>有单播，多播，广播的功能</li>\n</ol>\n<p>UDP 不止支持一对一的传输，同样支持一对多，多对多，多对一，也就是单播，广播，多播。</p>\n<ol start=\"3\">\n<li>UDP 是面向报文的</li>\n</ol>\n<p>UDP 仅对报文添加首部后就向下交付给 IP 层，UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界，因此，应用程序必须选择合适大小的报文。</p>\n<ol start=\"4\">\n<li>不可靠性</li>\n</ol>\n<p>首先不可靠性就体现在无连接上，想发就发，收到什么就传递什么，不对数据进行备份，而且也不在乎对方是否正确的收到了数据。<br>其次，网络环境时好时坏，因为UDP 没有拥塞控制，一直会以恒定的速度发送数据。即使网络环境不好，也不会对发送速率进行调整。这样实现的弊端就是在网络环境不好的情况下会导致丢包，但是优点也很明显，在某些实时性要求较高的场景（电话会议，视频直播）我们就需要使用 UDP 而不是 TCP。</p>\n<ol start=\"5\">\n<li>头部开销小，传输数据报文时很高效</li>\n</ol>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/20/5c91e64a75d2d.png\" alt=\"5c91e64a75d2d.png\" data-zoomable></p></div>\n<p>UDP 头部包含了以下几个数据：</p>\n<ul>\n<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口；</li>\n<li>整个数据报文的长度；</li>\n<li>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误。<br>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。</li>\n</ul>\n<h2 id=\"对比\">对比<a href=\"post/arc-04#对比\"></a></h2><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/03/20/5c91e652a6d55.png\" alt=\"5c91e652a6d55.png\" data-zoomable></p></div>\n<ul>\n<li>TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。</li>\n<li>虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为。</li>\n<li>对数据准确性要求高，速度可以相对较慢的，可以选用TCP。</li>\n</ul>\n<h2 id=\"Reference\">Reference<a href=\"post/arc-04#Reference\"></a></h2><p><a href=\"https://blog.csdn.net/howgod/article/details/88681236\" target=\"_blank\" rel=\"noopener\">TCP和UDP比较 -  浪里行舟的博客 - CSDN博客</a></p>\n","prev":{"title":"Vue 高级（Vue Router 基础）","link":"post/arc-05"},"next":{"title":"如何速成前端三件套 （CSS）","link":"post/arc-03"},"plink":"https://xkeith.space/post/arc-04/","toc":[{"title":"TCP / IP 网络模型","id":"TCP-IP-网络模型","index":"1"},{"title":"TCP","id":"TCP","index":"2","children":[{"title":"连接过程","id":"连接过程","index":"2.1","children":[{"title":"三次握手🤝","id":"三次握手🤝","index":"2.1.1"},{"title":"四次挥手🙋‍♂️","id":"四次挥手🙋‍♂️","index":"2.1.2"}]},{"title":"特点","id":"特点","index":"2.2"}]},{"title":"UDP","id":"UDP","index":"3","children":[{"title":"特点","id":"特点-1","index":"3.1"}]},{"title":"对比","id":"对比","index":"4"},{"title":"Reference","id":"Reference","index":"5"}]}