{"title":"从 URL 到显示网页到底发生了什么（前端满分回答考虑缓存存在无敌终极版本）","date":"2019-04-09T03:14:54.000Z","link":"post/arc-14","tags":["network"],"categories":["计算机网络"],"updated":"2019-04-09T03:17:47.520Z","content":"<hr>\n<h2 id=\"主要流程\">主要流程<a href=\"post/arc-14#主要流程\"></a></h2><ol>\n<li>输入 URL 并通过 DNS 解析得到 IP 地址</li>\n<li>通过 ARP 用 IP 地址找到 MAC 地址</li>\n<li>通过 MAC 和 TCP 三次握手与服务器建立连接</li>\n<li>如果使用 HTTPS 发送数据前需要进行 SSL 握手，同时对数据进行 SSL 加密</li>\n<li>使用 HTTP / HTTPS 发送请求报文</li>\n<li>服务器收到请求，并对请求作出相应，返回响应报文（可能会发生重定向哦）</li>\n<li>浏览器收到响应，开始渲染网页</li>\n<li>html解析 -&gt; 外部样式、脚本加载 -&gt; 外部样式执行 -&gt; 外部脚本执行 -&gt; html继续解析 -&gt; dom树构建完成 -&gt; 加载图片 -&gt; 页面加载完成</li>\n<li>异步脚本可能还会继续发起请求</li>\n</ol>\n<h2 id=\"地址栏网址缓存\">地址栏网址缓存<a href=\"post/arc-14#地址栏网址缓存\"></a></h2><p>输入网址的前几个字母浏览器可能会触发自动补全，此时网页的静态资源也是保存在浏览器缓存中的，此时我们的部分请求并不会发送到服务器，而是直接从缓存中取得，状态码是：</p>\n<p><em>200 OK (from disk cache)</em></p>\n<h2 id=\"检查-HSTS-预加载列表\">检查 HSTS 预加载列表<a href=\"post/arc-14#检查-HSTS-预加载列表\"></a></h2><blockquote>\n<p>HSTS（ HTTP Strict Transport Security ）国际互联网工程组织 IETE 正在推行一种新的 Web 安全协议，作用是强制客户端（如浏览器）使用 HTTPS 与服务器创建连接。  </p>\n</blockquote>\n<p><em>307 Internal Redirect</em><br>这个特殊的重定向往往出现在这个时候。<br>一句话来说就是存在于 HSTS 预加载列表的网址要求浏览器只使用 HTTPS 建立连接，他会把你输入的 HTTP URL 重定向到 HTTPS 协议的 URL 。而不支持 HSTS 的网站则不会发生重定向。</p>\n<h2 id=\"DNS-缓存\">DNS 缓存<a href=\"post/arc-14#DNS-缓存\"></a></h2><p>输入 URL 并回车后，域名解析就开始了，此时最少涉及三个地方的缓存。</p>\n<ol>\n<li>浏览器的 DNS 缓存</li>\n<li>操作系统中的 DNS 缓存</li>\n<li>hosts 文件中的缓存，可以手动写入的缓存</li>\n</ol>\n<h3 id=\"域名解析过程\">域名解析过程<a href=\"post/arc-14#域名解析过程\"></a></h3><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/04/09/5cac0e96d81c6.png\" alt=\"5cac0e96d81c6.png\" data-zoomable></p></div>\n<ol>\n<li>浏览器搜索自己的 DNS 缓存（浏览器维护一张域名与 IP 地址的对应表）；如果没有命中，进入下一步；</li>\n<li>搜索操作系统中的 DNS 缓存；如果没有命中，进入下一步；</li>\n<li>搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；如果没有命中，进入下一步；</li>\n<li>操作系统将域名发送至 LDNS （本地区域名服务器），LDNS 查询自己的 DNS 缓存（一般命中率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求：</li>\n<li>LDNS向 Root Name Server（根域名服务器，如com、net、im 等的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 im 域的顶级域名服务器的地址；</li>\n<li>LDNS 向 im 域的顶级域名服务器发起请求，返回 juejin.im 域名服务器地址；</li>\n<li>LDNS 向 juejin.im 域名服务器发起请求，得到 juejin.im 的 IP 地址；</li>\n<li>LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来。</li>\n</ol>\n<h3 id=\"DNS-Prefetch\">DNS Prefetch<a href=\"post/arc-14#DNS-Prefetch\"></a></h3><p>DNS 预获取，是前端优化的一部分，一般来说我们优化 DNS 主要是以下两点：</p>\n<ol>\n<li>减少 DNS 请求次数</li>\n<li>进行 DNS 预获取</li>\n</ol>\n<p>典型的一次 DNS 解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验。</p>\n<p>问：浏览器 DNS 缓存的时间一般不会太长，一分钟左右。为什么缓存不设置较长时间呢？<br>答：虽然 DNS 缓存可以提高获取 DNS 的速度，但缓存时间过长也会影响 DNS 在 IP 变更时不能及时解析到最新的 IP。</p>\n<h2 id=\"ARP-缓存\">ARP 缓存<a href=\"post/arc-14#ARP-缓存\"></a></h2><blockquote>\n<p>ARP 是一种用以解释地址的协议，根据通信方的 IP 地址就可以反查出对应方的 MAC 地址。  </p>\n</blockquote>\n<p>ARP 缓存是个用来储存 IP 地址和 MAC 地址的缓冲区，其本质就是一个 IP 地址与 MAC 地址的对应表，表中每一个条目分别记录了其他主机的 IP 地址和对应的 MAC 地址。<br><strong>当地址解析协议被询问一个已知 IP 地址节点的 MAC 地址时，先在 AR 缓存中查看，若存在，就直接返回与之对应的MAC地址；若不存在，才发送 ARP 请求查询。</strong></p>\n<h2 id=\"TCP-发送-接收缓冲区\">TCP 发送/接收缓冲区<a href=\"post/arc-14#TCP-发送-接收缓冲区\"></a></h2><p>建立 TCP 连接这一步也涉及到缓存 —— 用来临时存放双方通信的数据，<strong>保证通信数据不会丢包</strong>。<br>每个 TCP 连接在内核中都有一个发送缓冲区和接收缓冲区，TCP 的全双工的工作模式以及 TCP 的流量(拥塞)控制便是依赖于这两个独立的 buffer 以及 buffer 的填充状态。</p>\n<h3 id=\"发送缓冲区\">发送缓冲区<a href=\"post/arc-14#发送缓冲区\"></a></h3><p>内核基本上是按照 MSS（Maximum Segment Size，最大报文段长度） 从缓冲区中取数据发送出去，当缓冲区中数据小于 MSS，则将剩余数据全部发送出去。TCP 的发送缓冲区必须为已发送的数据保留一个副本，直到它被对端确认为止，才能从缓冲区中删掉已确认的数据。</p>\n<h3 id=\"接收缓冲区\">接收缓冲区<a href=\"post/arc-14#接收缓冲区\"></a></h3><p>接收缓冲区把数据缓存入内核，等待recv()方法读取，recv()方法所做的工作，就是把内核缓冲区中的数据拷贝到应用层用户的buffer里面，拷贝后就删掉已确认的数据。</p>\n<h2 id=\"HTTP-请求缓存\">HTTP 请求缓存<a href=\"post/arc-14#HTTP-请求缓存\"></a></h2><p>首先说结论，缓存的请求顺序和状态</p>\n<ul>\n<li>强缓存和协商缓存同时存在时，如果强缓存还在有效期内，则直接使用缓存（<em>200 OK from dist cache</em>），如果强缓存过期，使用协商缓存（<em>304 Not Modified</em>）。</li>\n<li>强缓存的 <code>expires</code> 和 <code>cache-control</code> 同时存在时，<code>cache-control</code> 会覆盖 <code>expires</code>，无论有没有过期，都无效。</li>\n<li>协商缓存的 <code>Etag</code> 和 <code>Last-Modified</code> 同时存在时，优先比对  <code>Etag</code>，随后才比较  <code>Last-Modified</code></li>\n</ul>\n<p>￼<br><img src=\"https://i.loli.net/2019/04/09/5cac0ea99203c.png\" alt=\"5cac0ea99203c.png\"></p>\n<h3 id=\"强缓存（Cache-Control-和-Expires）\">强缓存（Cache-Control 和 Expires）<a href=\"post/arc-14#强缓存（Cache-Control-和-Expires）\"></a></h3><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/04/09/5cac0ec641c8c.png\" alt=\"5cac0ec641c8c.png\" data-zoomable></p></div>\n<p><strong>如果采用强缓存，在缓存有效期内服务器资源发生改变页面数据并不会发生改变，缓存只会在下次过期时更新</strong></p>\n<h3 id=\"协商缓存（Last-Modified-和-Etag）\">协商缓存（Last-Modified 和 Etag）<a href=\"post/arc-14#协商缓存（Last-Modified-和-Etag）\"></a></h3><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/04/09/5cac0ed07e663.png\" alt=\"5cac0ed07e663.png\" data-zoomable></p></div>\n<p><strong>Last-Modified 和 If-Modified-Since</strong></p>\n<p>当客户端再次请求该资源的时候，会在其<strong>请求头</strong>上附带上 <code>If-Modified-Since</code> 字段（值就是第一次获取请求资源时响应头中返回的 <code>Last-Modified</code>值）。如果修改时间未改变则表明资源未过期，命中缓存，服务器就直接返回 304 状态码，客户端直接使用本地的资源。否则，服务器重新发送响应资源，从而保证资源的有效性。</p>\n<p><strong>Etag 和 If-None-Match</strong></p>\n<p>当客户端再次请求该资源的时候，会在其<strong>请求头</strong>上附带上 <code>If-None-Match</code>字段（值就是第一次获取请求资源时响应头中返回的<code>Etag</code> 值），其值与服务器端资源文件的验证码进行对比，如果匹配成功直接返回 304 状态码，从浏览器本地缓存取资源文件。如果不匹配，服务器会把新的验证码放在请求头的 Etag 字段中，并且以 200 状态码返回资源。</p>\n<p>相同的资源，在两台服务器产生的<code>Etag</code>是不是相同的，所以对于使用服务器集群来处理请求的网站来说，<code>Etag</code>的匹配概率会大幅降低。所在在这种情况下，使用<code>Etag</code>来处理缓存，反而会有更大的开销。</p>\n<h2 id=\"Reference\">Reference<a href=\"post/arc-14#Reference\"></a></h2><p><a href=\"https://juejin.im/post/5c6e77da6fb9a049db73bb07\" target=\"_blank\" rel=\"noopener\">【前端词典】从输入 URL 到展现涉及哪些缓存环节(非常详细) - 掘金</a><br><a href=\"https://juejin.im/post/5ca09e5c6fb9a05e6b44be04\" target=\"_blank\" rel=\"noopener\">HTTP缓存机制及原理 - 掘金</a></p>\n","prev":{"title":"如何拿下前端面试（函数和上下文闭包）","link":"post/arc-15"},"next":{"title":"如何拿下前端面试（性能篇）","link":"post/arc-12"},"plink":"https://xkeith.space/post/arc-14/","toc":[{"title":"主要流程","id":"主要流程","index":"1"},{"title":"地址栏网址缓存","id":"地址栏网址缓存","index":"2"},{"title":"检查 HSTS 预加载列表","id":"检查-HSTS-预加载列表","index":"3"},{"title":"DNS 缓存","id":"DNS-缓存","index":"4","children":[{"title":"域名解析过程","id":"域名解析过程","index":"4.1"},{"title":"DNS Prefetch","id":"DNS-Prefetch","index":"4.2"}]},{"title":"ARP 缓存","id":"ARP-缓存","index":"5"},{"title":"TCP 发送/接收缓冲区","id":"TCP-发送-接收缓冲区","index":"6","children":[{"title":"发送缓冲区","id":"发送缓冲区","index":"6.1"},{"title":"接收缓冲区","id":"接收缓冲区","index":"6.2"}]},{"title":"HTTP 请求缓存","id":"HTTP-请求缓存","index":"7","children":[{"title":"强缓存（Cache-Control 和 Expires）","id":"强缓存（Cache-Control-和-Expires）","index":"7.1"},{"title":"协商缓存（Last-Modified 和 Etag）","id":"协商缓存（Last-Modified-和-Etag）","index":"7.2"}]},{"title":"Reference","id":"Reference","index":"8"}]}