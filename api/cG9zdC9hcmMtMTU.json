{"title":"如何拿下前端面试（函数和上下文闭包）","date":"2019-04-11T13:11:00.000Z","link":"post/arc-15","tags":["front_end"],"categories":["前端"],"updated":"2019-04-11T13:12:31.545Z","content":"<hr>\n<h2 id=\"函数声明\">函数声明<a href=\"post/arc-15#函数声明\"></a></h2><blockquote>\n<p>两种声明方式，不同方式会影响函数的实际声明时间，从而影响函数的可执行时间  </p>\n</blockquote>\n<p><strong>只有通过函数表达式声明的函数才会被提到最前，而且比变量声明提前拥有更高的优先级，会提到最最最前面。</strong></p>\n<p>通过表达式声明的函数，只会发生变量提前，函数定义原地不变。<br>使用构造函数声明的函数也一样！</p>\n<p>会一道题就懂了</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)\t                <span class=\"comment\">//?</span></span><br><span class=\"line\">a();\t\t\t\t<span class=\"comment\">//?</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);\t                <span class=\"comment\">//?</span></span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\">a();\t\t\t\t<span class=\"comment\">//?</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"函数调用\">函数调用<a href=\"post/arc-15#函数调用\"></a></h2><h3 id=\"函数形式调用\">函数形式调用<a href=\"post/arc-15#函数形式调用\"></a></h3><blockquote>\n<p>根据 ECMAScript 3 和非严格的 ECMAScript 5 对函数调用的规定，调用上下文(this) 的值是全局对象，然而，在严格模式下，this 的值是 undefined。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义并调用一个函数来确定当前脚本运行时是否为严格模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strict = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;&#125;)</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"作为方法调用\">作为方法调用<a href=\"post/arc-15#作为方法调用\"></a></h3><blockquote>\n<p>作为方法调用的函数与普通调用的函数有一个很重要的区别，调用上下文不同，调用方法的对象成为函数执行的上下文，我们可以通过 this 获得这个对象。  </p>\n</blockquote>\n<p><strong>和变量不同，关键字 this 没有作用域的限制，嵌套的函数不会从调用他的函数中继承 this，如果嵌套函数作为方法调用，其this 的值指向调用他的对象。如果嵌套函数作为函数调用，其 this 值不是全局对象就是 undefined （严格模式）</strong></p>\n<p>很多时候我们希望在嵌套函数中的 this 也能指向调用外层函数时候的上下文，所以我们常常把这个 this 值保存在另外一个变量中。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    m: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === o); *<span class=\"comment\">// =&gt; true*</span></span><br><span class=\"line\">        f();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span> === o); *<span class=\"comment\">// =&gt; false*</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(self === o); *<span class=\"comment\">// =&gt; true*</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"作为构造函数调用\">作为构造函数调用<a href=\"post/arc-15#作为构造函数调用\"></a></h3><p>如果函数或者方法调用之前有关键字 new ，他就构成函数调用。构造函数调用和普通的函数调用以及方法调用在实参处理，调用上下文和返回值都不同。</p>\n<p>构造函数调用创建一个新的空对象，这个对象继承自构造函数的 prototype 属性。构造函数试图初始化这个新创建的对象，并将这个对象用做其调用上下文，因此构造函数可以使用 this 关键字来引用这个新创建的对象。</p>\n<p>注意，尽管构造函数看起来像一个方法调用，他依然会使用这个新对象作为调用上下文，也就是说，在表达式 <code>new o.m()</code> 中，调用上下文并不是 o。</p>\n<h3 id=\"通过他们的-call-和-apply-方法调用\">通过他们的 call() 和 apply() 方法调用<a href=\"post/arc-15#通过他们的-call-和-apply-方法调用\"></a></h3><p><strong>call 传入的是参数列表，apply 传入的是参数数组。</strong></p>\n<h2 id=\"函数参数\">函数参数<a href=\"post/arc-15#函数参数\"></a></h2><h3 id=\"可选形参\">可选形参<a href=\"post/arc-15#可选形参\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"comment\">// 可选参数*</span></span><br><span class=\"line\">*<span class=\"comment\">// 将对象 o 中可枚举的属性名追加到数组 a 中，并返回这个数组 a*</span></span><br><span class=\"line\">*<span class=\"comment\">// 如果省略 a ，则创建一个新数组并返回这个新数组*</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPropertyNames</span>(<span class=\"params\">o, <span class=\"regexp\">/* optional */</span> a</span>) </span>&#123;</span><br><span class=\"line\">    a = a || [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">        a.push(property);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"可变长参数\">可变长参数<a href=\"post/arc-15#可变长参数\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"comment\">// 可变长参数*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span> (<span class=\"params\"><span class=\"regexp\">/* ... */</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> max = <span class=\"built_in\">Number</span>.NEGATIVE_INFINITY;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[i] &gt; max) max = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"闭包\">闭包<a href=\"post/arc-15#闭包\"></a></h2><h3 id=\"作用域链\">作用域链<a href=\"post/arc-15#作用域链\"></a></h3><p>JavaScript 是基于词法作用域的语言。<br>在 JavaScript 的最顶层代码中（也就是不包含在任何函数定义内的代码），作用域链由一个全局对象组成，在不包含嵌套的函数体内，作用域链上有两个对象，第一个是定义函数参数和局部变量的对象，第二个是全局对象。在一个嵌套的函数体内，作用域链上<strong>至少有三个对象</strong><br>当定义一个函数时，它实际上保存一个作用域链，当调用这个函数的时候，它创建一个新的对象来存储他的<strong>局部变量</strong>，并将这个对象添加至保存的那个作用域链上，同时创建一个新的更长的表示<strong>函数调用作用域</strong>的链。<br>对于嵌套函数来说，每次调用外部函数时，内部函数又会重新定义一遍，因为每次调用外部函数的时候，作用域链都是不同的。内部函数在每次定义的时候都有微妙的差别，在每次调用外部函数时，内部函数的代码都是不相同的，而且关联这段代码的作用域链也不相同。</p>\n<h3 id=\"闭包-1\">闭包<a href=\"post/arc-15#闭包-1\"></a></h3><blockquote>\n<p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中成为闭包。  </p>\n</blockquote>\n<p>从技术的角度讲，所有的 JavaScript 函数都是闭包。他们都是对象，他们都关联到作用域链。<br>函数的执行依赖于变量作用域，这个作用域是函数被定义的时候决定的，而不是函数调用时决定的。<br>当调用函数时闭包所指向的作用域链和定义函数时候的作用域链不是同一个作用域链的时候，事情就变得非常微妙。<br><strong>当一个函数嵌套了一个函数，外部函数将嵌套的函数对象作为返回值返回的时候，闭包的作用就显现出来了</strong></p>\n<p>我们将作用域链描述为一个对象列表，不是绑定的栈。每次调用 JavaScript 函数的时候，都会为之创建一个新的对象用来保存局部变量，把这个对象添加至作用域链中。当函数返回的时候，就从作用域链中将这个绑定变量的对象删除。如果不存在嵌套的函数，也没有其他引用指向这个绑定对象，他就会被当作垃圾回收掉。<br>如果定义了嵌套的函数，每个嵌套的函数各自对应一个作用域链，并且这个作用域链指向一个变量绑定对象。如果这些嵌套的函数对象在外部函数中保存下来，那么他们也会和所指向的变量绑定对象一样当作垃圾回收。<strong>但是如果这个函数定义了嵌套的函数，并将它作为返回值返回或者存储在某处的内存中，这时就会有一个外部引用指向这个嵌套的函数。他就不会被当作垃圾回收，并且他指向的变量绑定对象也不会被当作垃圾回收。</strong></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存取器方法改写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> count() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n++;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span> count(m) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m &gt;= n) n = m;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"count can only be set to a larget value\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 迭代</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addPrivateProperty</span>(<span class=\"params\">o, name, predicate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value;</span><br><span class=\"line\">    o[<span class=\"string\">\"get\"</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> value;&#125;;</span><br><span class=\"line\">    o[<span class=\"string\">\"set\"</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(predicate &amp;&amp; !predicate(v)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`set + <span class=\"subst\">$&#123;name&#125;</span> + 错啦 <span class=\"subst\">$&#123;v&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            value = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">addPrivateProperty(o, <span class=\"string\">\"Name\"</span>, (x) =&gt; &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x == <span class=\"string\">\"string\"</span>&#125;);</span><br><span class=\"line\">o.setName(<span class=\"string\">\"fuck\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.getName());</span><br><span class=\"line\">o.setName(o);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 防止闭包中的变量的不恰当共享</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constfunc</span>(<span class=\"params\">v</span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;<span class=\"keyword\">return</span> v&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    funcs[i] = constfunc(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(funcs[<span class=\"number\">5</span>]());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尽量避免在循环中使用闭包，可能会产生闭包中变量的错误共享*</span></span><br><span class=\"line\"><span class=\"comment\">// 下面这个例子中 10 个闭包共享同一个变量*</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constfuncs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> funcs = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最后一个闭包将变量 i 改为10，因此所有的闭包中的变量都会跟着改变.</span></span><br><span class=\"line\">        funcs[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> i;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> funcs;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = constfuncs();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(funcs[<span class=\"number\">5</span>]());</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"函数属性，方法，构造函数\">函数属性，方法，构造函数<a href=\"post/arc-15#函数属性，方法，构造函数\"></a></h2><h3 id=\"length\">length<a href=\"post/arc-15#length\"></a></h3><p><strong>函数属性中的 length 代表着函数形参的数量，也就是函数希望得到的参数数量。</strong></p>\n<h3 id=\"bind-方法\">bind() 方法<a href=\"post/arc-15#bind-方法\"></a></h3><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = f.bind(o);</span><br><span class=\"line\">g(<span class=\"number\">2</span>); <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手写一个 bind()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">f, o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f.bind) <span class=\"keyword\">return</span> f.bind(o);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> f.apply(o, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化 bind()</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o <span class=\"regexp\">/*, args */</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">        boundArgs = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = [],</span><br><span class=\"line\">            i;</span><br><span class=\"line\">        <span class=\"comment\">// 保存 bind 时的参数列表, 柯里化参数绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; boundArgs.length; i++) &#123;</span><br><span class=\"line\">            args.push(boundArgs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保存返回值调用时的参数列表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">            args.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将 self 作为 o 的方法来调用，传入实参</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.apply(o, args);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"函数式编程\">函数式编程<a href=\"post/arc-15#函数式编程\"></a></h2><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5. 函数式编程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;<span class=\"keyword\">return</span> x + y;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;<span class=\"keyword\">return</span> x * x;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> mean = data.reduce(sum) / data.length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> deviations = data.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;<span class=\"keyword\">return</span> x - mean&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stddev = <span class=\"built_in\">Math</span>.sqrt(deviations.map(square).reduce(sum) / data.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手写一个 map</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"built_in\">Array</span>.prototype.map ? <span class=\"function\">(<span class=\"params\">a, f</span>) =&gt;</span> &#123;<span class=\"keyword\">return</span> a.map(f);&#125; : <span class=\"function\">(<span class=\"params\">a, f</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = a.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> a) results[i] = f.call(<span class=\"literal\">null</span>, a[i], i, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手写一个 reduce</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myReduce = <span class=\"function\">(<span class=\"params\">a, f, initial</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = a.length, accumulator;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">2</span>) accumulator = initial;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">                accumulator = a[i++];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 数组中没有已经定义的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == len) <span class=\"keyword\">throw</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 参与运算的两个参数是 accumulator 和 下一个 a[i]</span></span><br><span class=\"line\">            accumulator = f.call(<span class=\"literal\">null</span>, accumulator, a[i], i, a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"Reference\">Reference<a href=\"post/arc-15#Reference\"></a></h2><p><a href=\"https://www.cnblogs.com/echolun/p/7612142.html\" target=\"_blank\" rel=\"noopener\">【JS点滴】声明提前，变量声明提前，函数声明提前，声明提前的先后顺序 - 听风是风 - 博客园</a></p>\n","prev":{"title":"小谈防抖和节流","link":"post/arc-16"},"next":{"title":"从 URL 到显示网页到底发生了什么（前端满分回答考虑缓存存在无敌终极版本）","link":"post/arc-14"},"plink":"https://xkeith.space/post/arc-15/","toc":[{"title":"函数声明","id":"函数声明","index":"1"},{"title":"函数调用","id":"函数调用","index":"2","children":[{"title":"函数形式调用","id":"函数形式调用","index":"2.1"},{"title":"作为方法调用","id":"作为方法调用","index":"2.2"},{"title":"作为构造函数调用","id":"作为构造函数调用","index":"2.3"},{"title":"通过他们的 call() 和 apply() 方法调用","id":"通过他们的-call-和-apply-方法调用","index":"2.4"}]},{"title":"函数参数","id":"函数参数","index":"3","children":[{"title":"可选形参","id":"可选形参","index":"3.1"},{"title":"可变长参数","id":"可变长参数","index":"3.2"}]},{"title":"闭包","id":"闭包","index":"4","children":[{"title":"作用域链","id":"作用域链","index":"4.1"},{"title":"闭包","id":"闭包-1","index":"4.2"}]},{"title":"函数属性，方法，构造函数","id":"函数属性，方法，构造函数","index":"5","children":[{"title":"length","id":"length","index":"5.1"},{"title":"bind() 方法","id":"bind-方法","index":"5.2"}]},{"title":"函数式编程","id":"函数式编程","index":"6"},{"title":"Reference","id":"Reference","index":"7"}]}