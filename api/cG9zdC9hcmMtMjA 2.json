{"title":"详解前端模块化之路","date":"2019-04-30T08:20:37.000Z","link":"post/arc-20","tags":["front_end"],"categories":["前端"],"updated":"2019-04-30T08:21:30.301Z","content":"<hr>\n<h2 id=\"IIFE\">IIFE<a href=\"post/arc-20#IIFE\"></a></h2><p><em>Immediately Invoked Function Expression</em></p>\n<p>在 JavaScript 的块级作用域还没有正式收入规范的时候，JavaScript 只拥有函数作用域，也就意味着只有声明函数才能让变量与全局环境隔离，因此为了让 JavaScript 代码能够拥有“模块化”的特性，开发人员们会采用这种声明立即执行的匿名函数的方法来包裹模块。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> main_message = <span class=\"string\">'这是一条内容信息'</span> <span class=\"comment\">//main.js</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> main_error = <span class=\"string\">'这是一条错误信息'</span> <span class=\"comment\">//main.js</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'error:'</span>, main_error)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></div></figure>\n<p>因为是一个匿名的函数，执行完后很快就会被释放，这种机制不会污染全局对象。<br>虽然看起来有些麻烦，但它确实解决了我们将变量分离开来的需求，不是吗？然而在今天，几乎没有人会用这样方式来实现模块化编程。<br>后来又发生了什么呢？</p>\n<h2 id=\"Common-js\">Common.js<a href=\"post/arc-20#Common-js\"></a></h2><blockquote>\n<p>“What I’m describing here is not a technical problem. It’s a matter of people getting together and making a decision to step forward and start building up something bigger and cooler together.”</p>\n</blockquote>\n<blockquote>\n<p>CommonJS is a project with the goal to establish conventions on module ecosystem for JavaScript outside of the web browser. The primary reason of its creation was a major lack of commonly accepted form of JavaScript scripts module units which could be reusable in environments different from that provided by a conventional web browser e.g. web server or native desktop applications which run JavaScript scripts.</p>\n</blockquote>\n<p>一句话解释：</p>\n<p><strong>Common.js 的 require 实际上是把引用的 module 拷贝了一份到当前 module 中。</strong></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\"><span class=\"regexp\">/* ... */</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">module</span> = &#123; <span class=\"attr\">exports</span>: &#123;&#125; &#125;;</span><br><span class=\"line\">  (<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Module code here. In this example, define a function.</span></span><br><span class=\"line\">    <span class=\"comment\">// 模块代码在这里，在这个例子中，我们定义了一个函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFunc</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    exports = someFunc;</span><br><span class=\"line\">    <span class=\"comment\">// At this point, exports is no longer a shortcut to module.exports, and</span></span><br><span class=\"line\">    <span class=\"comment\">// this module will still export an empty default object.</span></span><br><span class=\"line\">    <span class=\"comment\">// 当代码运行到这里时，exports 不再是 module.exports 的引用，并且当前的</span></span><br><span class=\"line\">    <span class=\"comment\">// module 仍旧会导出一个空对象(就像上面声明的默认对象那样)</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = someFunc;</span><br><span class=\"line\">    <span class=\"comment\">// At this point, the module will now export someFunc, instead of the</span></span><br><span class=\"line\">    <span class=\"comment\">// default object.</span></span><br><span class=\"line\">    <span class=\"comment\">// 当代码运行到这时，当前 module 会导出 someFunc 而不是默认的对象</span></span><br><span class=\"line\">  &#125;)(<span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"特点\">特点<a href=\"post/arc-20#特点\"></a></h3><p>目前单独的 Common.js 是依赖于 node 的执行环境的，也就意味着不能直接在浏览器中使用，可以使用 Browserify 来让其在浏览器环境中执行，但是由于其本身对于依赖的复制是<strong>同步</strong>的，也就意味着在浏览器中可能会引起阻塞，因此我们需要一种可以异步引入依赖的模块化方案。</p>\n<h2 id=\"AMD\">AMD<a href=\"post/arc-20#AMD\"></a></h2><p><em>RequireJS &amp; AMD（Asynchronous Module Definition）</em></p>\n<p> <strong>引入其他模块:</strong>   <code>require()</code><br><strong>定义新的模块:</strong>    <code>define()</code></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的对象定义</span></span><br><span class=\"line\">define(&#123;</span><br><span class=\"line\">    color: <span class=\"string\">\"black\"</span>,</span><br><span class=\"line\">    size: <span class=\"string\">\"unisize\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当你需要一些逻辑来做准备工作时可以这样定义：</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里可以做一些准备工作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        color: <span class=\"string\">\"black\"</span>,</span><br><span class=\"line\">        size: <span class=\"string\">\"unisize\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依赖于某些模块来定义属于你自己的模块</span></span><br><span class=\"line\">define([<span class=\"string\">\"./cart\"</span>, <span class=\"string\">\"./inventory\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cart, inventory</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过返回一个对象来定义你自己的模块</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            color: <span class=\"string\">\"blue\"</span>,</span><br><span class=\"line\">            size: <span class=\"string\">\"large\"</span>,</span><br><span class=\"line\">            addToCart: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                inventory.decrement(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                cart.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"特点-1\">特点<a href=\"post/arc-20#特点-1\"></a></h3><ul>\n<li>以函数的形式返回模块的值，尤其是构造函数，可以更好的实现API 设计，Node 中通过 module.exports 来支持这个，但使用 “return function (){}” 会更清晰。这意味着，我们不必通过处理 “module” 来实现 “module.exports”，它是一个更清晰的代码表达式。</li>\n<li>动态代码加载（在AMD系统中通过require（[]，function（）{}）来完成）是一项基本要求。CJS谈到了， 有一些建议，但没有完全囊括它。Node 不支持这种需求，而是依赖于require（’’）的同步行为，这对于 Web 环境来说是不方便的。</li>\n<li>Loader 插件非常有用，在基于回调的编程中，这有助于避免使用常见的嵌套大括号缩进。</li>\n<li>选择性地将一个模块映射到从另一个位置加载，很方便的地提供了用于测试的模拟对象。</li>\n<li>每个模块最多只能有一个 IO 操作，而且应该是简洁的。Web 浏览器不能容忍从多个 IO 中来查找模块。这与现在 Node 中的多路径查找相对，并且避免使用 package.json 的 “main” 属性。而只使用模块名称，基于项目位置来简单的映射到一个位置的模块名称，不需要详细配置的合理默认规则，但允许在必要时进行简单配置。</li>\n<li>最好的是，如果有一个 “opt-in” 可以用来调用，以便旧的 JS 代码可以加入到新系统。</li>\n</ul>\n<p>通过上面的语法说明，我们会发现一个很明显的问题，在使用 RequireJS 声明一个模块时，必须指定所有的依赖项 ，这些依赖项会被当做形参传到 factory 中，对于依赖的模块会提前执行（在 RequireJS 2.0 也可以选择延迟执行），这被称为：<strong>依赖前置</strong>。<br>这会带来什么问题呢？<br>加大了开发过程中的难度，无论是阅读之前的代码还是编写新的内容，也会出现这样的情况：引入的另一个模块中的内容是条件性执行的。</p>\n<h2 id=\"CMD\">CMD<a href=\"post/arc-20#CMD\"></a></h2><figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 的一个例子，当然这是一种极端的情况</span></span><br><span class=\"line\">define([<span class=\"string\">\"header\"</span>, <span class=\"string\">\"main\"</span>, <span class=\"string\">\"footer\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">header, main, footer</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xxx) &#123;</span><br><span class=\"line\">      header.setHeader(<span class=\"string\">'new-title'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xxx) &#123;</span><br><span class=\"line\">      main.setMain(<span class=\"string\">'new-content'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xxx) &#123;</span><br><span class=\"line\">      footer.setFooter(<span class=\"string\">'new-footer'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 与之对应的 CMD 的写法</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xxx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> header = <span class=\"built_in\">require</span>(<span class=\"string\">'./header'</span>)</span><br><span class=\"line\">      header.setHeader(<span class=\"string\">'new-title'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xxx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> main = <span class=\"built_in\">require</span>(<span class=\"string\">'./main'</span>)</span><br><span class=\"line\">      main.setMain(<span class=\"string\">'new-content'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xxx) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> footer = <span class=\"built_in\">require</span>(<span class=\"string\">'./footer'</span>)</span><br><span class=\"line\">      footer.setFooter(<span class=\"string\">'new-footer'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n<p>我们可以很清楚的看到，CMD 规范中，只有当我们用到了某个外部模块的时候，它才会去引入，这回答了我们上一小节中遗留的问题，这也是它与 AMD 规范最大的不同点：<strong>CMD推崇依赖就近 + 延迟执行</strong></p>\n<p>我们能够看到，按照 CMD 规范的依赖就近的规则定义一个模块，会导致模块的加载逻辑偏重，有时你并不知道当前模块具体依赖了哪些模块或者说这样的依赖关系并不直观。<br>而且对于 AMD 和 CMD 来说，都只是适用于浏览器端的规范，而 Node.js module 仅仅适用于服务端，都有各自的局限性。</p>\n<h2 id=\"ES6-Module\">ES6 Module<a href=\"post/arc-20#ES6-Module\"></a></h2><blockquote>\n<p>“The goal for ECMAScript 6 modules was to create a format that both users of CommonJS and of AMD are happy with”</p>\n</blockquote>\n<p>ES Module 会对<strong>静态代码分析</strong>，即在代码编译时进行模块的加载，在运行时之前就已经确定了依赖关系（可解决<strong>循环引用</strong>的问题）；<br>ES Module 关键字：import export 以及独有的 default 关键字，确定默认的导出值；<br>ES Module 中导出的值是一个 只读的值的引用，无论基础类型和复杂类型，而在 CommonJS 中 require 的是值的拷贝，其中复杂类型是值的浅拷贝；</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; fn &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ex = <span class=\"built_in\">require</span>(<span class=\"string\">\"./export/index\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span> x <span class=\"keyword\">from</span> <span class=\"string\">\"./export/index\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fn &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./export/index\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ex, <span class=\"string\">\"export1\"</span>); <span class=\"comment\">// &#123;fn: ƒ, __esModule: true&#125; \"export1\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x, <span class=\"string\">\"export-x\"</span>); <span class=\"comment\">// undefined \"export-x\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn, <span class=\"string\">\"export-fn\"</span>); <span class=\"comment\">// function() &#123; return window.location.href; &#125; \"export-x\"</span></span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// export/index1.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fn;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show/index1.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ex1 = <span class=\"built_in\">require</span>(<span class=\"string\">\"./export/index1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span> x <span class=\"keyword\">from</span> <span class=\"string\">\"./export/index1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ex1, <span class=\"string\">\"export1\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// &#123;default: ƒ, __esModule: true&#125; \"export1\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x, <span class=\"string\">\"export2\"</span>); </span><br><span class=\"line\"><span class=\"comment\">// ƒ fn() &#123;return window.location.href;&#125; \"export2\"</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"Reference\">Reference<a href=\"post/arc-20#Reference\"></a></h2><p><a href=\"https://mp.weixin.qq.com/s/3tOzk70aYayY8XJZv1YYEA\" target=\"_blank\" rel=\"noopener\">深入了解“前端模块化”发展体系</a><br><a href=\"https://juejin.im/post/5ba9f5bff265da0af2136fd5#heading-9\" target=\"_blank\" rel=\"noopener\">Javascript 模块化管理的来世今生 - 掘金</a><br><a href=\"https://juejin.im/post/5b6c222a6fb9a04fde5af4ee#heading-8\" target=\"_blank\" rel=\"noopener\">Javascript 模块化指北 - 掘金</a></p>\n","prev":{"title":"手撕 Symbol","link":"post/arc-22"},"next":{"title":"每天（不知道有几）道前端面试题（四月篇）","link":"post/arc-13"},"plink":"https://xkeith.space/post/arc-20/","toc":[{"title":"IIFE","id":"IIFE","index":"1"},{"title":"Common.js","id":"Common-js","index":"2","children":[{"title":"特点","id":"特点","index":"2.1"}]},{"title":"AMD","id":"AMD","index":"3","children":[{"title":"特点","id":"特点-1","index":"3.1"}]},{"title":"CMD","id":"CMD","index":"4"},{"title":"ES6 Module","id":"ES6-Module","index":"5"},{"title":"Reference","id":"Reference","index":"6"}]}