{"title":"每天（不知道有几）道前端面试题（五月）","date":"2019-05-20T04:00:00.000Z","link":"post/arc-21","tags":["front_end"],"categories":["前端"],"updated":"2019-05-20T08:48:42.992Z","content":"<hr>\n<font color=\"#FF0000\">题库主要来自于<a href=\"http://yygmind.github.io/\" target=\"_blank\" rel=\"noopener\">木易阳</a>的 Github 整理和个人平时面试经验。<br>题库收集原则上仅供笔者个人学习整理所用，一切版权都归 Reference 及相应公司所有。<br>从五月起每天一段 JavaScript 代码段，主要来源于 30s-of-code 让写代码像呼吸一样自然。<br></font>\n\n<h2 id=\"2019-05-20\">2019/05/20<a href=\"post/arc-21#2019-05-20\"></a></h2><p><em>字节跳动 2019 年春招前端开发实习生一面</em></p>\n<ul>\n<li>详细解释一下同源策略</li>\n<li>字符串类型转换的问题</li>\n<li>JavaScript 值类型数据和引用类型数据的两种存储方式</li>\n<li>对象和数组的底层数据结构</li>\n<li>事件冒泡的问题</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"noopener\">HTTP访问控制（CORS） - HTTP | MDN</a><br><a href=\"https://blog.csdn.net/kangzai2012/article/details/81410962\" target=\"_blank\" rel=\"noopener\">js六种数据类型是怎么样存储的？ - kangzai2012的博客 - CSDN博客</a></p>\n<p><strong>6种基本类型</strong></p>\n<ol>\n<li>string</li>\n<li>number</li>\n<li>boolean</li>\n<li>undefined</li>\n<li>null</li>\n<li>symbol</li>\n</ol>\n<p><strong>基本数据类型都是一些简单的数据段，它们是存储在栈内存中</strong></p>\n<p><strong>引用数据类型</strong></p>\n<p>引用数据类型是保存在堆内存中的，然后再栈内存中保存一个对堆内存中实际对象的引用。所以，JavaScript中对引用数据类型的操作都是操作对象的引用而不是实际的对象。<br>可以理解为，栈内存中保存了一个地址，这个地址和堆内存中的实际值是相关的。</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/05/20/5ce268268730d39806.png\" alt=\"5ce268268730d39806.png\" data-zoomable></p></div>\n<p>为什么基础数据类型存在栈中，而引用数据类型存在堆中呢？</p>\n<ul>\n<li>堆比栈大，栈比对速度快。</li>\n<li>基础数据类型比较稳定，而且相对来说占用的内存小。</li>\n<li>引用数据类型大小是动态的，而且是无限的。</li>\n<li>堆内存是无序存储，可以根据引用直接获取。</li>\n</ul>\n<p><strong>代码题</strong></p>\n<ul>\n<li>括号匹配</li>\n<li>一个版本号排序的问题，考察函数式编程</li>\n<li>读程序说结果</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\tresolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>).then(<span class=\"built_in\">console</span>.log);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.then(<span class=\"built_in\">console</span>.log);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; 2 1</span></span><br><span class=\"line\"><span class=\"comment\">// 思考为什么？</span></span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> = <span class=\"string\">\"parent\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> = <span class=\"string\">\"child\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    parent.addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; alert(<span class=\"number\">1</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    parent.addEnentListener(<span class=\"string\">\"click\"</span>, () =&gt; alert(<span class=\"number\">2</span>), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    child.addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; alert(<span class=\"number\">3</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    child.addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; alert(<span class=\"number\">4</span>), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">// =&gt; 2 3 4 1</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2019-05-17\">2019/05/17<a href=\"post/arc-21#2019-05-17\"></a></h2><blockquote>\n<p>输出以下代码运行结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// example 1</span><br><span class=\"line\">var a=&#123;&#125;, b=&apos;123&apos;, c=123;  </span><br><span class=\"line\">a[b]=&apos;b&apos;;</span><br><span class=\"line\">a[c]=&apos;c&apos;;  </span><br><span class=\"line\">console.log(a[b]);</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------</span><br><span class=\"line\">// example 2</span><br><span class=\"line\">var a=&#123;&#125;, b=Symbol(&apos;123&apos;), c=Symbol(&apos;123&apos;);  </span><br><span class=\"line\">a[b]=&apos;b&apos;;</span><br><span class=\"line\">a[c]=&apos;c&apos;;  </span><br><span class=\"line\">console.log(a[b]);</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------</span><br><span class=\"line\">// example 3</span><br><span class=\"line\">var a=&#123;&#125;, b=&#123;key:&apos;123&apos;&#125;, c=&#123;key:&apos;456&apos;&#125;;  </span><br><span class=\"line\">a[b]=&apos;b&apos;;</span><br><span class=\"line\">a[c]=&apos;c&apos;;  </span><br><span class=\"line\">console.log(a[b]);</span><br></pre></td></tr></table></div></figure>\n<p>考察知识点：</p>\n<ul>\n<li>对象的 key 必须是字符串或者是 Symbol 类型</li>\n<li>其他类型的键名会被转换成字符串类型</li>\n<li>对象转字符串默认也会调用 toString 方法</li>\n</ul>\n<p>所以第一个例子中的两个键名是相同的，都是 “123”。因此后一个值会覆盖前一个值。<br>而第二个例子中的两个键名都是 Symbol 类型，因此不会重复，也不会发生覆盖现象。<br>第三个例子中的键名是对象类型，被调用 <code>toString</code> 之后的结果都是 <code>[object object]</code> ，因此后一个值同样会覆盖前一个值。</p>\n<h2 id=\"2019-05-16\">2019/05/16<a href=\"post/arc-21#2019-05-16\"></a></h2><blockquote>\n<p>详细解释一下 HTML 5 中的 hash 和 history ，他们常用的 API，以及浏览器实现两种不同的路由方式的原理。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/A13330069275/article/details/81010638\" target=\"_blank\" rel=\"noopener\">hash 和 history的区别 - A13330069275的博客 - CSDN博客</a></p>\n<p><em>history</em></p>\n<p><code>pushState()</code><br><code>replaceState()</code></p>\n<p>history 的实现基于浏览器的历史记录栈，通过对历史记录的修改来跳转页面，因此 history 虽然改变了路由，并不会向服务器发送请求。<br>这样带来的问题是一般的单页面应用是不会覆盖全所有页面的路由的，这样一来用户如果直接输入 URL 或者刷新页面去强制请求服务器的话就会 404，因此需要我们在服务端配置好。</p>\n<p><em>hash</em></p>\n<p><code>hashChange()</code></p>\n<p>hash 模式下，只有 hash 符号前的 URL 才会被请求到服务端，因此即使后端没有做到对路由的全覆盖也不会出现 404。</p>\n<h2 id=\"2019-05-15\">2019/05/15<a href=\"post/arc-21#2019-05-15\"></a></h2><blockquote>\n<p>使用 JavaScript Proxy 实现简单的数据绑定</p>\n</blockquote>\n<p><em>30s-of-code</em></p>\n<p><em>Flip takes a function as an argument, then makes the first argument the last.</em></p>\n<p><em>Return a closure that takes variadic inputs, and splices the last argument</em><br><em>to make it the first argument before applying the rest.</em></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> flip = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> (first, ...rest) =&gt; fn(...rest, first);</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"attr\">name</span> : <span class=\"string\">\"John Smith\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeFrom = flip(<span class=\"built_in\">Object</span>.assign);</span><br><span class=\"line\"><span class=\"comment\">// 这里是利用了 bind 构造了柯里化函数，默认第一个参数是 a</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mergePerson = mergeFrom.bind(<span class=\"literal\">null</span>, a);</span><br><span class=\"line\"><span class=\"comment\">// 实际上就是 mergeFrom(b, a) 我们的函数会把第一个参数移动到最后</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mergePerson(b));</span><br><span class=\"line\">b = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.assign(b, a));</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2019-05-14\">2019/05/14<a href=\"post/arc-21#2019-05-14\"></a></h2><blockquote>\n<p>解释一下 vue 中的 $nextTick</p>\n</blockquote>\n<p><a href=\"https://juejin.im/post/5cd9854b5188252035420a13\" target=\"_blank\" rel=\"noopener\">你真的理解$nextTick么 - 掘金</a></p>\n<blockquote>\n<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。<br>2.1.0 起新增：如果没有提供回调且在支持 Promise 的环境中，则返回一个 Promise。请注意 Vue 不自带 Promise 的 polyfill，所以如果你的目标浏览器不原生支持 Promise (IE：你们都看我干嘛)，你得自己提供 polyfill。<br>可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。</p>\n</blockquote>\n<p>实际上 <code>$nextTick</code> 是一个微任务，因此在 JavaScript 引擎结束工作后会立即调用微任务队列中的回调函数，因为一个 Evevt Loop 的执行流程是 宏任务 -&gt; 微任务 -&gt; GUI 引擎 -&gt; 下一个宏任务。<br>因此使用 <code>$nextTick</code> 的好处在于可以最早的拿到修改后的 DOM 对象，不需要非要等待 GUI 渲染结束。</p>\n<p><em>30s-of-code</em></p>\n<p><em>Counts the occurrences of a value in an array.</em></p>\n<p><em>Use Array.prototype.reduce()</em><br><em>to increment a counter each time you encounter the specific value inside the array.</em></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;[]&#125; arr</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;*&#125; val</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> countOccurrences = <span class=\"function\">(<span class=\"params\">arr, val</span>) =&gt;</span></span><br><span class=\"line\">    arr.reduce(<span class=\"function\">(<span class=\"params\">a, v</span>) =&gt;</span> (v === val ? a + <span class=\"number\">1</span> : a), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(countOccurrences([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>));</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2019-05-13\">2019/05/13<a href=\"post/arc-21#2019-05-13\"></a></h2><blockquote>\n<p>为什么普通 for 循环的性能远远高于 forEach 的性能，请解释其中的原因</p>\n</blockquote>\n<ul>\n<li><p>for 循环没有任何额外的函数调用栈和上下文；</p>\n</li>\n<li><p>forEach函数签名实际上是</p>\n</li>\n</ul>\n<p><code>array.forEach(function(currentValue, index, arr), thisValue)</code><br>它不是普通的 for 循环的语法糖，还有诸多参数和上下文需要在执行的时候考虑进来，这里可能拖慢性能；</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/05/13/5cd974a51190730530.png\" alt=\"5cd974a51190730530.png\" data-zoomable></p></div>\n<h2 id=\"2019-05-11\">2019/05/11<a href=\"post/arc-21#2019-05-11\"></a></h2><p><em>30s-of-code</em></p>\n<blockquote>\n<p>chainAsync</p>\n<p>Chains asynchronous functions.</p>\n<p>Loop through an array of functions containing asynchronous events, calling next when each asynchronous event has completed.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;[function]&#125; fns</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chainAsync = <span class=\"function\"><span class=\"params\">fns</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> curr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = fns[fns.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里递归传入下一个数组中的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> fn = fns[curr++];</span><br><span class=\"line\">        fn === last ?  fn() : fn(next);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">chainAsync([</span><br><span class=\"line\">    next =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"0 seconds\"</span>);</span><br><span class=\"line\">        setTimeout(next, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    next =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1 second\"</span>);</span><br><span class=\"line\">        setTimeout(next, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"2 second\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2019-05-10\">2019/05/10<a href=\"post/arc-21#2019-05-10\"></a></h2><p><em>30s-of-code</em></p>\n<blockquote>\n<p>Replaces all but the last num of characters with the specified mask character.</p>\n<p>Use String.prototype.slice() to grab the portion of the characters that<br>will remain unmasked and use String.padStart()<br>to fill the beginning of the string with the mask character up to the original length.<br>Omit the second argument, num, to keep a default of 4 characters unmasked. If num is negative,<br>the unmasked characters will be at the start of the string.<br>Omit the third argument, mask, to use a default character of ‘*’ for the mask.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mask = <span class=\"function\">(<span class=\"params\">cc, num = <span class=\"number\">4</span>, mask = <span class=\"string\">\"*\"</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最右侧 num 个字符不变，在其左侧填充 mask 直到长度等于原字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;cc&#125;</span>`</span>.slice(-num).padStart(<span class=\"string\">`<span class=\"subst\">$&#123;cc&#125;</span>`</span>.length, mask);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = mask(<span class=\"string\">\"13123\"</span>, <span class=\"number\">3</span>, <span class=\"string\">\"$\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">res = mask(<span class=\"string\">\"123123123fuck\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2019-05-09\">2019/05/09<a href=\"post/arc-21#2019-05-09\"></a></h2><blockquote>\n<p>介绍下 webpack 热更新原理，是如何做到在不刷新浏览器的前提下更新页面的</p>\n</blockquote>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/05/09/5cd437efaae2c.png\" alt=\"5cd437efaae2c.png\" data-zoomable></p></div>\n<p><em>30s-of-code</em></p>\n<p>Groups the elements of an array based on the given function.</p>\n<p>Use Array.prototype.map() to map the values of an array to a function or property name.<br>Use Array.prototype.reduce() to create an object, where the keys are produced from the mapped results.</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;[]&#125; arr</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;&#125; fn</span></span><br><span class=\"line\"><span class=\"comment\">* @returns &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* fn 可以是一个函数，也可以是一个对象所拥有的属性</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> groupBy = <span class=\"function\">(<span class=\"params\">arr, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先用 map 来提取 fn 结果作为键</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">        .map(<span class=\"keyword\">typeof</span> fn === <span class=\"string\">\"function\"</span> ? fn : <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val[fn])</span><br><span class=\"line\">        .reduce(<span class=\"function\">(<span class=\"params\">acc, val, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拓展返回的对象</span></span><br><span class=\"line\">            acc[val] = (acc[val] || []).concat(arr[i]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">        &#125;, &#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = groupBy([<span class=\"number\">6.1</span>, <span class=\"number\">4.2</span>, <span class=\"number\">6.3</span>], <span class=\"built_in\">Math</span>.floor); <span class=\"comment\">// &#123;4: [4.2], 6: [6.1, 6.3]&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">res = groupBy([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], <span class=\"string\">'length'</span>); <span class=\"comment\">// &#123;3: ['one', 'two'], 5: ['three']&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2019-05-08\">2019/05/08<a href=\"post/arc-21#2019-05-08\"></a></h2><blockquote>\n<p>如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ’AbC’ 变成 ‘aBc’</p>\n</blockquote>\n<p><a href=\"https://github.com/XXXMrG/javascript-snippets/blob/master/30s-code/processingString.js\" target=\"_blank\" rel=\"noopener\">javascript-snippets/processingString.js at master · XXXMrG/javascript-snippets · GitHub</a></p>\n<p><em>30s-of-code</em></p>\n<p><strong>bifurcate</strong><br>Splits values into two groups. If an element infilteris truthy, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.<br>UseArray.prototype.reduce()andArray.prototype.push()to add elements to groups, based onfilter.</p>\n<p>Example</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bifurcate([<span class=\"string\">'beep'</span>, <span class=\"string\">'boop'</span>, <span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>], [<span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>]); <span class=\"comment\">// [ ['beep', 'boop', 'bar'], ['foo'] ]</span></span><br></pre></td></tr></table></div></figure>\n<p><strong>Solution</strong></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Splits values into two groups. If an element infilteris truthy, the corresponding element in the collection belongs to the first group;</span></span><br><span class=\"line\"><span class=\"comment\">otherwise, it belongs to the second group.</span></span><br><span class=\"line\"><span class=\"comment\">UseArray.prototype.reduce() and Array.prototype.push()to add elements to groups, based onfilter.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">**</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;[]&#125; data</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;[]&#125; filters</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bifurcate = <span class=\"function\">(<span class=\"params\">data, filters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 逗号运算符返回最后一个结果哦</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.reduce(<span class=\"function\">(<span class=\"params\">acc, val, i</span>) =&gt;</span> (acc[filters[i] ? <span class=\"number\">0</span> : <span class=\"number\">1</span>].push(val), acc), [[], []])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = bifurcate([<span class=\"string\">'beep'</span>, <span class=\"string\">'boop'</span>, <span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>], [<span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>]); <span class=\"comment\">// [ ['beep', 'boop', 'bar'], ['foo'] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"2019-05-07\">2019/05/07<a href=\"post/arc-21#2019-05-07\"></a></h2><blockquote>\n<p>如何解决移动端 Retina 屏 1px 像素问题</p>\n</blockquote>\n<h2 id=\"2019-05-06\">2019/05/06<a href=\"post/arc-21#2019-05-06\"></a></h2><blockquote>\n<p>随机生成一个长度为 10 的整数类型的数组，例如<code>[2, 10, 3, 4, 5, 11, 10, 11, 20]</code>，将其排列成一个新数组，要求新数组形式如下，例如<code>[[2, 3, 4, 5], [10, 11], [20]]</code>。</p>\n</blockquote>\n<p><a href=\"https://github.com/XXXMrG/javascript-snippets/blob/master/30s-code/day-05-06.js\" target=\"_blank\" rel=\"noopener\">javascript-snippets/day-05-06.js at master · XXXMrG/javascript-snippets · GitHub</a></p>\n<blockquote>\n<p>模拟实现一个 Promise.finally</p>\n</blockquote>\n<h2 id=\"2019-05-05\">2019/05/05<a href=\"post/arc-21#2019-05-05\"></a></h2><blockquote>\n<p>解释一下事件委托？</p>\n</blockquote>\n<h2 id=\"2019-05-04\">2019/05/04<a href=\"post/arc-21#2019-05-04\"></a></h2><blockquote>\n<p>解释 HTML5 中 history 和 hash 模式的区别</p>\n</blockquote>\n<p><a href=\"https://www.jianshu.com/p/3fcae6a4968f?open_source=weibo_search\" target=\"_blank\" rel=\"noopener\">hash和history两种模式的区别 - 简书</a></p>\n<h2 id=\"2019-05-03\">2019/05/03<a href=\"post/arc-21#2019-05-03\"></a></h2><blockquote>\n<p>如何在 JavaScript 中实现私有变量？</p>\n</blockquote>\n<p>闭包或者 Symbol</p>\n<blockquote>\n<p>用 JavaScript 实现一个单例模式。</p>\n</blockquote>\n<p><a href=\"https://juejin.im/post/57e9e5065bbb50005d6c6345\" target=\"_blank\" rel=\"noopener\">Javascript单例模式概念与实例 - 掘金</a><br><a href=\"https://juejin.im/post/5afd5341518825429d1f83f4\" target=\"_blank\" rel=\"noopener\">JS单例模式《JavaScript设计模式与开发实践》阅读笔记 - 掘金</a></p>\n<h2 id=\"2019-05-02\">2019/05/02<a href=\"post/arc-21#2019-05-02\"></a></h2><blockquote>\n<p>那么我们今天就手写个 axios 吧！</p>\n</blockquote>\n<h2 id=\"2019-05-01\">2019/05/01<a href=\"post/arc-21#2019-05-01\"></a></h2><blockquote>\n<p>那么我们就手写个 Promise 吧！</p>\n</blockquote>\n","prev":{"title":"React 技术栈","link":"post/arc-23"},"next":{"title":"手撕 Symbol","link":"post/arc-22"},"plink":"https://xkeith.space/post/arc-21/","toc":[{"title":"2019/05/20","id":"2019-05-20","index":"1"},{"title":"2019/05/17","id":"2019-05-17","index":"2"},{"title":"2019/05/16","id":"2019-05-16","index":"3"},{"title":"2019/05/15","id":"2019-05-15","index":"4"},{"title":"2019/05/14","id":"2019-05-14","index":"5"},{"title":"2019/05/13","id":"2019-05-13","index":"6"},{"title":"2019/05/11","id":"2019-05-11","index":"7"},{"title":"2019/05/10","id":"2019-05-10","index":"8"},{"title":"2019/05/09","id":"2019-05-09","index":"9"},{"title":"2019/05/08","id":"2019-05-08","index":"10"},{"title":"2019/05/07","id":"2019-05-07","index":"11"},{"title":"2019/05/06","id":"2019-05-06","index":"12"},{"title":"2019/05/05","id":"2019-05-05","index":"13"},{"title":"2019/05/04","id":"2019-05-04","index":"14"},{"title":"2019/05/03","id":"2019-05-03","index":"15"},{"title":"2019/05/02","id":"2019-05-02","index":"16"},{"title":"2019/05/01","id":"2019-05-01","index":"17"}]}