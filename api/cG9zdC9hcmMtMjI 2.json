{"title":"手撕 Symbol","date":"2019-05-03T13:58:40.000Z","link":"post/arc-22","tags":["front_end"],"categories":["前端"],"updated":"2019-05-03T13:59:16.203Z","content":"<hr>\n<h2 id=\"基础\">基础<a href=\"post/arc-22#基础\"></a></h2><h3 id=\"概述\">概述<a href=\"post/arc-22#概述\"></a></h3><p>第六种原始简单数据类型，表示独一无二的值，只能通过 Symbol 函数生成。<br>不能使用 new 关键字，也就是说不能通过构造函数来生成。因为是个原始类型的值，不是对象，也不存在什么原型链等等等。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> s <span class=\"comment\">// =&gt; \"symbol\"</span></span><br></pre></td></tr></table></div></figure>\n<p>可以在初始的时候接受一个字符串作为参数，实际上没什么应用意义，因为每一个 Symbol 都是不同的，仅用做输出的时候的区分，以及转成字符串不一样。<br>如果你想给 Symbol 传入一个对象作为参数，那么会先调用该对象的 <code>toString()</code> 方法，所以传进去的还是个字符串哦。<br>正常情况下每一次使用 Symbol 生成的都是完全不同的两个变量，当然也有办法避免这种重复。<br>Symbol 不能参与任何运算，仅可以转换成 String 和 Boolean。</p>\n<h2 id=\"应用\">应用<a href=\"post/arc-22#应用\"></a></h2><h3 id=\"用做属性名\">用做属性名<a href=\"post/arc-22#用做属性名\"></a></h3><p>由于每一个 Symbol 值都是不相等的，意味着 Symbol 可以用做标识符来保证对象里不会出现重名的属性。可以有效防止多个模块的对象构成的时候不小心覆盖或重写某个键。<br>无论是在对象内部使用 Symbol 定义一个键还是在对象外使用这个键，Symbol 都只能通过方括号的方式使用，不能用点运算符，点运算符会把它重新变成一个普通的字符串。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mySymbol = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    [mySymbol] : <span class=\"string\">\"fuck\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a[mySymbol] <span class=\"comment\">// =&gt; \"fuck\"</span></span><br><span class=\"line\">a.mySymbol <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"定义一组不相等的常量\">定义一组不相等的常量<a href=\"post/arc-22#定义一组不相等的常量\"></a></h3><p>Symbol 用做属性值，也就是 value 中的时候，由于其唯一性，可以用于定义一组不会变化的常量，Symbol 可以保证不可能会在其他地方出现相同的值了。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> COLOR_RED = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> COLOR_GREEN = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComplement</span> (<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (color) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COLOR_RED : <span class=\"keyword\">return</span> COLOR_GREEN;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COLOR_GREEN : <span class=\"keyword\">return</span> COLOR_RED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"消除魔术字符串\">消除魔术字符串<a href=\"post/arc-22#消除魔术字符串\"></a></h3><p>魔术字符串就是代码中重复出现却与代码形成强耦合的部分，不利于程序的修改的维护。<br>我们可以利用 Symbol 的唯一性来代替那些仅用于分支或者判断的魔术字符串。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shapeType = &#123;</span><br><span class=\"line\">    triangle : <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArea</span> (<span class=\"params\">shape, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shape) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> shapeType.triangle : doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"定义私有变量\">定义私有变量<a href=\"post/arc-22#定义私有变量\"></a></h3><p>Symbol 作为属性名，该属性不会出现在 <code>for...in for...of</code> 循环中，也不会被 <code>Object.keys(); Object.getOwnPropertyNames()</code> 返回，但是它也并非私有属性，可以用 <code>Object.getOwnPropertySymbols()</code> 返回一个数组，其中包含所有 Symbol 属性名。<br>一个新的 API <code>Reflect.ownKeys()</code> 可以返回所有类型的键名，包括 Symbol 。</p>\n<p>我们可以利用 Symbol 的遍历隐蔽性，定义一些非私有但又希望只用于内部的方法。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> size = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"size\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Collection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[size] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    add(item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>[size]] = item;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[size]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> sizeOf(instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance[size];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> Collection();</span><br><span class=\"line\">Collection.sizeOf(x); <span class=\"comment\">// =&gt; 0</span></span><br><span class=\"line\">x.add(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">Collection.sizeOf(x) <span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(); <span class=\"comment\">// =&gt; [\"0\"]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertySymbols(x) <span class=\"comment\">// =&gt; [Symbol(size)]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(x) <span class=\"comment\">// =&gt; [\"0\"]</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"复用-Symbol\">复用 Symbol<a href=\"post/arc-22#复用-Symbol\"></a></h3><p>我们并非一定要产生新的 Symbol 值，我们可以通过字符串参数查找并定位一个已经生成的 Symbol 值。<br><code>Symbol.for()</code> 接受一个字符串参数，搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，如果没有，就以这个参数为名称新建一个 Symbol 值。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">s1 === s2 <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></div></figure>\n<p><code>Symbol.for()</code> 会为该 Symbol 登记在全局环境中，并且在调用时搜索这个 Symbol 值，但是普通的 <code>Symbol()</code> 只是会每次都产生一个不同的 Symbol 值。<br><strong>Symbol.for 为 Symbol 登记的名字是全局环境的，可以在不同的 iframe 或 service worker 中取到同一个值</strong></p>\n<h3 id=\"内置的-Symbol-数值\">内置的 Symbol 数值<a href=\"post/arc-22#内置的-Symbol-数值\"></a></h3><p>ES6 中定义了 11 个内置的 Symbol 值，用在语言内部作为属性名，在调用某些内置方法的时候，实际上调用的是内部的一个以 Symbol 为属性名的方法。<br>因此我们也可以通过更改 Symbol 的指向来覆盖原生方法。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Symbol</span>.hasInstance <span class=\"comment\">// 指向对象的 instanceof 运算符对应的方法</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.isConcatSpreadable <span class=\"comment\">// 一个布尔值，表示该对象使用 concat 方法的时候是否会展开</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.species <span class=\"comment\">// 指向当前对象的构造函数，以为着 new 的时候会被调用，同时定义的时候要使用 get 读取器</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.match <span class=\"comment\">// 指向 match 的函数</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.replace <span class=\"comment\">// 指向 replace 的方法</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.search <span class=\"comment\">// 指向 search 的方法</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.split <span class=\"comment\">// 指向 split 的方法</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.iterator <span class=\"comment\">// 指向默认遍历器方法</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.toPrimitive <span class=\"comment\">// 指向类型转换的时候调用的方法，接受三种字符串参数：“number” \"string\" \"default\"</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.toStringTag <span class=\"comment\">// 指向 toString()</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.unscopables <span class=\"comment\">// 指向一个对象，定义了使用 with 的时候那些属性会被 with 环境排除</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"手写一个-Symbol\">手写一个 Symbol<a href=\"post/arc-22#手写一个-Symbol\"></a></h2><p>当调用 Symbol 的时候，会采用以下步骤：</p>\n<ol>\n<li>如果使用 new ，就报错</li>\n<li>如果 description 是 undefined，让 descString 为 undefined</li>\n<li>否则 让 descString 为 ToString(description)</li>\n<li>如果报错，就返回</li>\n<li>返回一个新的唯一的 Symbol 值，它的内部属性 [[Description]] 值为 descString</li>\n</ol>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> root = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> generateName = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> postfix = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">descString</span>)</span>&#123;</span><br><span class=\"line\">            postfix++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'@@'</span> + descString + <span class=\"string\">'_'</span> + postfix</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> SymbolPolyfill = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Symbol</span>(<span class=\"params\">description</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> SymbolPolyfill) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Symbol is not a constructor'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> descString = description === <span class=\"literal\">undefined</span> ? <span class=\"literal\">undefined</span> : <span class=\"built_in\">String</span>(description)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> symbol = <span class=\"built_in\">Object</span>.create(&#123;</span><br><span class=\"line\">            toString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__Name__;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            valueOf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperties(symbol, &#123;</span><br><span class=\"line\">            <span class=\"string\">'__Description__'</span>: &#123;</span><br><span class=\"line\">                value: descString,</span><br><span class=\"line\">                writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                configurable: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">'__Name__'</span>: &#123;</span><br><span class=\"line\">                value: generateName(descString),</span><br><span class=\"line\">                writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                configurable: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> symbol;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> forMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperties(SymbolPolyfill, &#123;</span><br><span class=\"line\">        <span class=\"string\">'for'</span>: &#123;</span><br><span class=\"line\">            value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">description</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> descString = description === <span class=\"literal\">undefined</span> ? <span class=\"literal\">undefined</span> : <span class=\"built_in\">String</span>(description)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> forMap[descString] ? forMap[descString] : forMap[descString] = SymbolPolyfill(descString);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'keyFor'</span>: &#123;</span><br><span class=\"line\">            value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">symbol</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> forMap) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (forMap[key] === symbol) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    root.SymbolPolyfill = SymbolPolyfill;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"Reference\">Reference<a href=\"post/arc-22#Reference\"></a></h2><p><a href=\"https://juejin.im/post/5b1f4c21f265da6e0f70bb19\" target=\"_blank\" rel=\"noopener\">ES6 系列之模拟实现 Symbol 类型 - 掘金</a></p>\n","prev":{"title":"每天（不知道有几）道前端面试题（五月）","link":"post/arc-21"},"next":{"title":"详解前端模块化之路","link":"post/arc-20"},"plink":"https://xkeith.space/post/arc-22/","toc":[{"title":"基础","id":"基础","index":"1","children":[{"title":"概述","id":"概述","index":"1.1"}]},{"title":"应用","id":"应用","index":"2","children":[{"title":"用做属性名","id":"用做属性名","index":"2.1"},{"title":"定义一组不相等的常量","id":"定义一组不相等的常量","index":"2.2"},{"title":"消除魔术字符串","id":"消除魔术字符串","index":"2.3"},{"title":"定义私有变量","id":"定义私有变量","index":"2.4"},{"title":"复用 Symbol","id":"复用-Symbol","index":"2.5"},{"title":"内置的 Symbol 数值","id":"内置的-Symbol-数值","index":"2.6"}]},{"title":"手写一个 Symbol","id":"手写一个-Symbol","index":"3"},{"title":"Reference","id":"Reference","index":"4"}]}