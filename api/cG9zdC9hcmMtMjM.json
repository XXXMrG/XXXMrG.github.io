{"title":"React 技术栈","date":"2019-06-02T08:20:32.000Z","link":"post/arc-23","tags":["front_end"],"categories":["前端"],"updated":"2019-06-02T08:24:07.647Z","content":"<h1 id=\"React-技术栈\">React 技术栈<a href=\"post/arc-23#React-技术栈\"></a></h1><hr>\n<h2 id=\"React\">React<a href=\"post/arc-23#React\"></a></h2><div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/06/02/5cf3875681d1676912.jpg\" alt=\"5cf3875681d1676912.jpg\" data-zoomable></p></div>\n<h3 id=\"State\">State<a href=\"post/arc-23#State\"></a></h3><ul>\n<li><p>不要直接修改 State</p>\n</li>\n<li><p>State 的更新可能是异步的</p>\n</li>\n<li><p>State 的更新会被合并</p>\n</li>\n<li><p>数据流是向下流动的</p>\n</li>\n</ul>\n<h3 id=\"事件处理\">事件处理<a href=\"post/arc-23#事件处理\"></a></h3><ul>\n<li><p>注意绑定的回调函数的 this 可以采用显示 bind 或者使用 class fields 语法</p>\n</li>\n<li><p>向事件处理程序传递参数，通过箭头函数或者 bind 注意 React 的事件对象 e 会被作为第二个参数传递，如果使用箭头函数事件对象必须显式的进行传递。</p>\n</li>\n</ul>\n<h3 id=\"列表-key\">列表 key<a href=\"post/arc-23#列表-key\"></a></h3><ul>\n<li><p>注意要保证列表有 key 且最好不要是 index</p>\n</li>\n<li><p>一个好的经验法则是：在<code>map()</code>方法中的元素需要设置 key 属性。</p>\n</li>\n<li><p>key 会传递信息给 React 但不会传递任何信息给你的组件</p>\n</li>\n<li><p>JSX 中可以直接内联 map 但是必要的时候你要注意组件提取</p>\n</li>\n</ul>\n<h3 id=\"表单\">表单<a href=\"post/arc-23#表单\"></a></h3><p>在 React 里，HTML 表单元素的工作方式和其他的 DOM 元素有些不同，这是因为表单元素通常会保持一些内部的 state。</p>\n<p>在 HTML 中，表单元素（如<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>和<code>&lt;select&gt;</code>）之类的表单元素通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 <a href=\"https://react.docschina.org/docs/react-component.html#setstate\" target=\"_blank\" rel=\"noopener\">setState()</a> 来更新。</p>\n<p>我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。</p>\n<h3 id=\"组合-vs-继承\">组合 vs 继承<a href=\"post/arc-23#组合-vs-继承\"></a></h3><ul>\n<li><p><code>props.children</code>  用来传递并渲染子组件</p>\n</li>\n<li><p>同样可以直接传递组件作为 <code>props</code></p>\n</li>\n</ul>\n<h3 id=\"React-哲学\">React 哲学<a href=\"post/arc-23#React-哲学\"></a></h3><ol>\n<li>将 UI 稿划分为组件层级，保证单一功能原则，如果一个组件负责的功能超过一个，请考虑将其拆分为更小的组件。</li>\n<li>先用 props 构建一个静态版本，不包含功能交互的静态版本，注意此时不应该用到 state 因为 state 是可变的，应该在功能交互的时候使用。</li>\n<li>确定 UI state 的最小（完整）表示。设计那些数据需要使用 state ，避免将可以计算或不变的数据设置为 state</li>\n<li>确定 state 放置的位置，适当的提升状态来实现组件间的单向数据流</li>\n<li>通过传递回调函数来实现反向数据流，实现用子组件更新父组件</li>\n</ol>\n<h2 id=\"Redux\">Redux<a href=\"post/arc-23#Redux\"></a></h2><blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理</p>\n</blockquote>\n<h3 id=\"React-存在的痛点\">React 存在的痛点<a href=\"post/arc-23#React-存在的痛点\"></a></h3><p>单一数据流严重限制了组件间数据的通信，即使存在状态提升或者是通过传递回调函数的方式来实现数据流传递，当一个单页应用的规模变大后数据管理将是很困难的。</p>\n<h3 id=\"三大原则\">三大原则<a href=\"post/arc-23#三大原则\"></a></h3><ul>\n<li>单一数据源</li>\n<li>State 是只读的</li>\n<li>reducer 应该是纯纯的函数</li>\n</ul>\n<p><strong>应用中所有的 state 都以一个对象树的形式储存在一个单一的<em>store</em>中。 惟一改变 state 的办法是触发<em>action</em>，一个描述发生什么的对象。 为了描述 action 如何改变 state 树，你需要编写<em>reducers</em>。</strong></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</span></span><br><span class=\"line\"><span class=\"comment\"> * 描述了 action 如何把 state 转变成下一个 state。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * state 的形式取决于你，可以是基本类型、数组、对象、</span></span><br><span class=\"line\"><span class=\"comment\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</span></span><br><span class=\"line\"><span class=\"comment\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></span><br><span class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></span><br><span class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></span><br><span class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"Store\">Store<a href=\"post/arc-23#Store\"></a></h3><p>整个应用的  被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</p>\n<h3 id=\"Reducer\">Reducer<a href=\"post/arc-23#Reducer\"></a></h3><p>虽然出于性能方面的考虑， <a href=\"https://github.com/gaearon/redux/issues/328#issuecomment-125035516\" target=\"_blank\" rel=\"noopener\">写不纯的 reducer</a> 来变动数据在技术上是<strong>可行</strong>的，但我们并不鼓励这么做。不纯的 reducer 会使一些开发特性，如时间旅行、记录/回放或热加载不可实现。此外，在大部分实际应用中，这种数据不可变动的特性并不会带来性能问题，就像 <a href=\"https://github.com/omcljs/om\" target=\"_blank\" rel=\"noopener\">Om</a> 所表现的，即使对象分配失败，仍可以防止昂贵的重渲染和重计算。而得益于 reducer 的纯度，应用内的变化更是一目了然。</p>\n<h3 id=\"Action\">Action<a href=\"post/arc-23#Action\"></a></h3><p>Action 是用来描述且进行更新 state 的唯一手段，可以理解为是一个描述数据转化的对象，有了 Action 我们可以对每一步数据操作都有清晰的掌控，Action 可以调用 reducer 来操作数据。</p>\n<h3 id=\"Immutable\">Immutable<a href=\"post/arc-23#Immutable\"></a></h3><h2 id=\"Redux-Saga\">Redux-Saga<a href=\"post/arc-23#Redux-Saga\"></a></h2><p>实际上这就是一个完成异步 reducer 的库，因为在 redux 中我们要求所有的 reducer 都必须是纯函数，而业务中肯定难免遇到异步操作，Redux-Saga 是一个更为优雅的解决方案</p>\n<h2 id=\"Dva\">Dva<a href=\"post/arc-23#Dva\"></a></h2><p>万能的支付宝给出的目前最完美的 React 解决方案。<br>相当于 React + Redux + Redux-Saga + React-Router</p>\n<h2 id=\"antd\">antd<a href=\"post/arc-23#antd\"></a></h2><p>别说了，用就完事了。</p>\n","prev":{"title":"每天（不知道有几）道前端面试题（六月）","link":"post/arc-24"},"next":{"title":"每天（不知道有几）道前端面试题（五月）","link":"post/arc-21"},"plink":"https://xkeith.space/post/arc-23/","toc":[{"title":"React 技术栈","id":"React-技术栈","index":"1","children":[{"title":"React","id":"React","index":"1.1","children":[{"title":"State","id":"State","index":"1.1.1"},{"title":"事件处理","id":"事件处理","index":"1.1.2"},{"title":"列表 key","id":"列表-key","index":"1.1.3"},{"title":"表单","id":"表单","index":"1.1.4"},{"title":"组合 vs 继承","id":"组合-vs-继承","index":"1.1.5"},{"title":"React 哲学","id":"React-哲学","index":"1.1.6"}]},{"title":"Redux","id":"Redux","index":"1.2","children":[{"title":"React 存在的痛点","id":"React-存在的痛点","index":"1.2.1"},{"title":"三大原则","id":"三大原则","index":"1.2.2"},{"title":"Store","id":"Store","index":"1.2.3"},{"title":"Reducer","id":"Reducer","index":"1.2.4"},{"title":"Action","id":"Action","index":"1.2.5"},{"title":"Immutable","id":"Immutable","index":"1.2.6"}]},{"title":"Redux-Saga","id":"Redux-Saga","index":"1.3"},{"title":"Dva","id":"Dva","index":"1.4"},{"title":"antd","id":"antd","index":"1.5"}]}]}