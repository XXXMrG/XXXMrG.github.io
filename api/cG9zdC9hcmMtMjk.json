{"title":"看破 React-Router v4","date":"2019-07-18T13:21:56.000Z","thumbnail":"https://i.loli.net/2019/07/18/5d30829ceb6bb76611.png","color":"#111","link":"post/arc-29","tags":["React"],"categories":["前端"],"updated":"2019-07-18T14:31:12.083Z","content":"<p>This guide’s purpose is to explain the mental model to have when using React Router. We call it “Dynamic Routing”, which is quite different from the “Static Routing” you’re probably more familiar with.<br><a id=\"more\"></a></p>\n<blockquote>\n<p>React 是完整的 React 路由解决方案</p>\n</blockquote>\n<p>一句话，React 用于保持 URL 和 UI 同步，保证每次 URL 的改变都带来 UI 的变化，并且在单页面应用程序中，这样的改变应该是驱动页面跳转的最佳方式。</p>\n<p><em>本文基于 React-Router v4 英文文档，私以为每个人都应该使用 v4 因为该版本的 Router 思想高度契合 React 基本思想</em></p>\n<h2 id=\"Dynamic-Routing\">Dynamic Routing<a href=\"post/arc-29#Dynamic-Routing\"></a></h2><p>When we say dynamic routing, we mean routing that takes place<strong>as your app is rendering</strong>, not in a configuration or convention outside of a running app. That means almost everything is a component in React Router. </p>\n<p>React Router v4 开始启用了动态路由，区别于其他的两大框架的路由解决方案，按照作者的看法来说，v4 的动态路由才是更符合 React 哲学的路由解决方案，彻底抛弃了声明式路由列表之后，动态路由可以让我们的应用构建过程更加灵活，无论什么情况下只要需要变化的场景都可以随时引入一个 Route 来通过 URL 控制，而不需要单独维护一个静态的路由配置文件。按照作者的 React Router 哲学来说，任何一个路由在使用时与普通的 component 没有任何区别，因此路由的定义和使用都非常的符合 React 的编程风格。</p>\n<h3 id=\"Responsive-Routes\">Responsive Routes<a href=\"post/arc-29#Responsive-Routes\"></a></h3><p>这是一个检测屏幕大小自动更改路由策略的例子，我们可以看出任何一个 Route 组件实际在使用的时候和普通的 component 是没啥区别的。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;AppLayout&gt;</span><br><span class=\"line\">    &lt;Route path=<span class=\"string\">\"/invoices\"</span> component=&#123;Invoices&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/AppLayout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Invoices = () =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;Layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#123;/</span>* always show the nav *<span class=\"regexp\">/&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;InvoicesNav /</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Media query=&#123;PRETTY_SMALL&#125;&gt;</span><br><span class=\"line\">      &#123;screenIsSmall =&gt;</span><br><span class=\"line\">        screenIsSmall ? (</span><br><span class=\"line\">          <span class=\"comment\">// small screen has no redirect</span></span><br><span class=\"line\">          &lt;Switch&gt;</span><br><span class=\"line\">            &lt;Route exact path=<span class=\"string\">\"/invoices/dashboard\"</span> component=&#123;Dashboard&#125; /&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">\"/invoices/:id\"</span> component=&#123;Invoice&#125; /&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">          /</span><span class=\"regexp\">/ large screen does!</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Route exact path=\"/i</span>nvoices/dashboard<span class=\"string\">\" component=&#123;Dashboard&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Route path=\"</span>/invoices/:id<span class=\"string\">\" component=&#123;Invoice&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;Redirect from=\"</span>/invoices<span class=\"string\">\" to=\"</span>/invoices/dashboard<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">        )</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Media&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Layout&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></div></figure>\n<p>This is just one example. There are many others we could discuss but we’ll sum it up with this advice: To get your intuition in line with React Router’s, think about components, not static routes. Think about how to solve the problem with React’s declarative composability because nearly every “React Router question” is probably a “React question”.</p>\n<h2 id=\"Redux-Integration\">Redux Integration<a href=\"post/arc-29#Redux-Integration\"></a></h2><p>与 Redux 的集成。如果我们将 React Router 的几个核心 state 存放到 Redux 的 store 中就基本可以完成与 Redux  的深度集成，但是尽量在集成之前仔细思考这样会解决那些痛点，因为其实不需要那么深度的集成二者之间就已经可以很好的协同工作了。</p>\n<p>集成的过程中可能会出现以下问题。</p>\n<h3 id=\"忽略更新\">忽略更新<a href=\"post/arc-29#忽略更新\"></a></h3><p>Generally, React Router and Redux work just fine together. Occasionally though, an app can have a component that doesn’t update when the location changes (child routes or active nav links don’t update).</p>\n<p>This happens if:</p>\n<ol>\n<li>The component is connected to redux via <code>connect()(Comp)</code>.</li>\n<li>The component is<strong>not</strong>a “route component”, meaning it is not rendered like so:<code>&lt;Route component={SomeConnectedThing}/&gt;</code><br>The problem is that Redux implements shouldComponentUpdate and there’s no indication that anything has changed if it isn’t receiving props from the router. This is straightforward to fix. Find where youconnectyour component and wrap it in withRouter.</li>\n</ol>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// before</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(Something)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> withRouter(connect(mapStateToProps)(Something))</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"深度集成\">深度集成<a href=\"post/arc-29#深度集成\"></a></h2><p>Some folks want to:</p>\n<ol>\n<li>Synchronize the routing data with, and accessed from, the store.</li>\n<li>Be able to navigate by dispatching actions.</li>\n<li>Have support for time travel debugging for route changes in the Redux devtools.<br>All of this requires deeper integration.<br>Our recommendation is<strong>not to keep your routes in your Redux store at all</strong>. Reasoning:</li>\n<li>Routing data is already a prop of most of your components that care about it. Whether it comes from the store or the router, your component’s code is largely the same.</li>\n<li>In most cases, you can useLink,NavLinkandRedirectto perform navigation actions. Sometimes you might also need to navigate programmatically, after some asynchronous task that was originally initiated by an action. For example, you might dispatch an action when the user submits a login form. Your <a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\" rel=\"noopener\">thunk</a> , <a href=\"https://redux-saga.js.org/\" target=\"_blank\" rel=\"noopener\">saga</a> or other async handler then authenticates the credentials,<em>then</em>it needs to somehow navigate to a new page if successful. The solution here is simply to include thehistoryobject (provided to all route components) in the payload of the action, and your async handler can use this to navigate when appropriate.</li>\n<li>Route changes are unlikely to matter for time travel debugging. The only obvious case is to debug issues with your router/store synchronization, and this problem goes away if you don’t synchronize them at all.</li>\n</ol>\n<h2 id=\"Examples\">Examples<a href=\"post/arc-29#Examples\"></a></h2><h2 id=\"API\">API<a href=\"post/arc-29#API\"></a></h2><h3 id=\"Route-props\">Route props<a href=\"post/arc-29#Route-props\"></a></h3><p>All three <a href=\"https://reacttraining.com/react-router/core/api/Route/route-render-methods\" target=\"_blank\" rel=\"noopener\">render methods</a> will be passed the same three route props</p>\n<ul>\n<li><a href=\"https://reacttraining.com/react-router/core/api/match\" target=\"_blank\" rel=\"noopener\">match</a> </li>\n<li><a href=\"https://reacttraining.com/react-router/core/api/location\" target=\"_blank\" rel=\"noopener\">location</a> </li>\n<li><a href=\"https://reacttraining.com/react-router/core/api/history\" target=\"_blank\" rel=\"noopener\">history</a> </li>\n</ul>\n<h3 id=\"history\">history<a href=\"post/arc-29#history\"></a></h3><p>The term “history” and “history object” in this documentation refers to <a href=\"https://github.com/ReactTraining/history\" target=\"_blank\" rel=\"noopener\">the history package</a> , which is one of only 2 major dependencies of React Router (besides React itself), and which provides several different implementations for managing session history in JavaScript in various environments.<br>The following terms are also used:</p>\n<ul>\n<li>“browser history” - A DOM-specific implementation, useful in web browsers that support the HTML5 history API</li>\n<li>“hash history” - A DOM-specific implementation for legacy web browsers</li>\n<li>“memory history” - An in-memory history implementation, useful in testing and non-DOM environments like React Native</li>\n</ul>\n<p>historyobjects typically have the following properties and methods:</p>\n<ul>\n<li>length- (number) The number of entries in the history stack</li>\n<li>action- (string) The current action (PUSH,REPLACE, orPOP)</li>\n<li>location- (object) The current location. May have the following properties:<ul>\n<li>pathname- (string) The path of the URL</li>\n<li>search- (string) The URL query string</li>\n<li>hash- (string) The URL hash fragment</li>\n<li>state- (object) location-specific state that was provided to e.g.push(path, state)when this location was pushed onto the stack. Only available in browser and memory history.</li>\n</ul>\n</li>\n<li>push(path, [state])- (function) Pushes a new entry onto the history stack</li>\n<li>replace(path, [state])- (function) Replaces the current entry on the history stack</li>\n<li>go(n)- (function) Moves the pointer in the history stack bynentries</li>\n<li>goBack()- (function) Equivalent togo(-1)</li>\n<li>goForward()- (function) Equivalent togo(1)</li>\n<li>block(prompt)- (function) Prevents navigation (see <a href=\"https://github.com/ReactTraining/history#blocking-transitions\" target=\"_blank\" rel=\"noopener\">the history docs</a> )</li>\n</ul>\n<p><em>TBD……</em></p>\n<h2 id=\"Reference\">Reference<a href=\"post/arc-29#Reference\"></a></h2><p><a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener\">React Router: Declarative Routing for React.js</a><br><a href=\"https://reacttraining.com/react-router/core/guides/philosophy\" target=\"_blank\" rel=\"noopener\">React Router: Declarative Routing for React.js-Philosophy </a><br>  <a href=\"https://reacttraining.com/react-router/core/guides/redux-integration\" target=\"_blank\" rel=\"noopener\">Redux Integration</a><br><a href=\"https://zhuanlan.zhihu.com/p/28585911\" target=\"_blank\" rel=\"noopener\">你不知道的 React Router 4 - 知乎</a><br><a href=\"https://juejin.im/post/5a641747518825732d7fb25f\" target=\"_blank\" rel=\"noopener\">React Router 4 简介及其背后的路由哲学 - 掘金</a></p>\n","next":{"title":"Redux 哲学","link":"post/arc-28"},"plink":"https://xkeith.space/post/arc-29/","toc":[{"title":"Dynamic Routing","id":"Dynamic-Routing","index":"1","children":[{"title":"Responsive Routes","id":"Responsive-Routes","index":"1.1"}]},{"title":"Redux Integration","id":"Redux-Integration","index":"2","children":[{"title":"忽略更新","id":"忽略更新","index":"2.1"}]},{"title":"深度集成","id":"深度集成","index":"3"},{"title":"API","id":"API","index":"4","children":[{"title":"Route props","id":"Route-props","index":"4.1"},{"title":"history","id":"history","index":"4.2"}]},{"title":"Reference","id":"Reference","index":"5"}]}