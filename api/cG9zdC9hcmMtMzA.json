{"title":"函数式编程 in JavaScript","date":"2019-08-03T09:26:44.000Z","thumbnail":"https://i.loli.net/2019/08/04/V7loXmD21wbeiSC.jpg","color":"#111","link":"post/arc-30","tags":["JavaScript"],"categories":["前端"],"updated":"2019-08-04T03:27:56.065Z","content":"<blockquote>\n<p>对我来说，重大演变还是向更加函数式的风格的发展，它使得我们放弃很多旧的习惯，并从一些面向对象思想中逐渐退出。  —— John Carmack</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>函数式编程有别于我们传统的学习的面向对象编程，它使用函数来将值转换成抽象单元，接着用于构建软件系统。<br>不同于命令式编程的流水线编程方式，函数式编程并不需要事无巨细的将整个程序的流程编写出来，或者说在函数式编程中，程序通过一个个黑盒来进行数据的处理，通过黑盒的结合来得到结果，我们并不需要关系黑盒内部发生了什么，同时我们也一定要保证每一次黑盒的调用的相同输入会产生相同的输出。<br>函数式与面向对象编程的最大区别在于对问题的处理方式，面向对象编程指导我们将问题分解并组合，用实际生活的思想去思考编程风格，用对象组合来解决问题。而函数式编程的思考方式则更为直接，直接将问题提出到得出结果的流程抽象成多个函数处理结果的过程，通过用函数来分布计算输入得到输出结果。<br>而在函数式编程中最为重要的前提就是编程语言应将函数作为“一等公民”来处理，这意味着函数应该同其他基本类型是没有区别的，可以作为参数传入另一个函数，也可以作为函数的返回值，这就赋予了我们更多的处理函数的能力，如参数分解调用（Currying）纯函数。函数式编程赋予了 JavaScript 编程很多新的编程思想，这些编程思想在很多前端框架中广为使用，但函数式编程同样不仅仅是前端的专利，同时我们也不应落入函数式编程是“政治正确”的误区，保持程序的高效可维护，团队代码风格统一这些才应该是我们重点考虑的，函数式编程只是一种工具而已。<br><em>使之运行，使之正确，使之快速</em></p>\n<h2 id=\"高阶函数\">高阶函数<a href=\"post/arc-30#高阶函数\"></a></h2><h2 id=\"由函数构建函数\">由函数构建函数<a href=\"post/arc-30#由函数构建函数\"></a></h2><h2 id=\"递归\">递归<a href=\"post/arc-30#递归\"></a></h2><h2 id=\"纯度和不变性\">纯度和不变性<a href=\"post/arc-30#纯度和不变性\"></a></h2><h2 id=\"Mixin\">Mixin<a href=\"post/arc-30#Mixin\"></a></h2><h2 id=\"Reference\">Reference<a href=\"post/arc-30#Reference\"></a></h2>","next":{"title":"看破 React-Router v4","link":"post/arc-29"},"plink":"https://xkeith.space/post/arc-30/","toc":[{"title":"Reference","id":"Reference","index":"1"}]}