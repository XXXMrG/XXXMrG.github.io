{"title":"DP 之最长公共子序列和最长公共子串","date":"2019-09-05T11:31:23.000Z","thumbnail":"https://i.loli.net/2019/09/05/afINlDJcPYseSd6.png","color":"#111","link":"post/dp-lcs","tags":["dp"],"categories":["算法"],"updated":"2019-09-05T13:57:32.672Z","content":"<p>两个问题都是典型的 dp 问题，也就是整体的最优解依赖于子问题的最优解，同时子问题求解的过程中存在着问题重叠，意味着我们可以通过保存结果的方式来用空间换时间。<br>最长公共子串（Longest Common Substring）与最长公共子序列（Longest Common Subsequence）的区别： 子串要求在原字符串中是连续的，而子序列则只需保持相对顺序，并不要求连续。<br><a id=\"more\"></a></p>\n<h2 id=\"Longest-Common-Subsequence\">Longest Common Subsequence<a href=\"post/dp-lcs#Longest-Common-Subsequence\"></a></h2><p>问题描述：给定两个序列：X[1…m]和Y[1…n]，求在两个序列中同时出现的最长子序列的长度。<br>假设 X 和 Y 的序列如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X[1...m] = &#123;A, B, C, B, D, A, B&#125;</span><br><span class=\"line\">Y[1...n] = &#123;B, D, C, A, B, A&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，X 和 Y 的最长公共子序列有 “BDAB”、“BCAB”、“BCBA”，即长度为4。<br>我们将子问题分解为 m 和 n 递增的过程，子问题的解分别是以第 m 个字符和第 n 个字符为结尾的两个字符串中的最长子序列的长度，递推公式如下。</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/09/05/1tDY5Bzua6nbyKm.png\" alt=\"1tDY5Bzua6nbyKm.png\" data-zoomable></p></div>\n<p>如果当前指针指向的两个字符相等则在子问题的基础上增加一，如果不相等，就向前找最大值作为此处的解。则最后的数组元素即为最优解。</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/09/05/XeCbALTfJzQU8sM.png\" alt=\"XeCbALTfJzQU8sM.png\" data-zoomable></p></div>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;string&#125; s1</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;string&#125; s2</span></span><br><span class=\"line\"><span class=\"comment\">* 最长子序列 可以不连续</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> LCS = <span class=\"function\">(<span class=\"params\">s1, s2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = s1.length + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = s2.length + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = makeArray(m, n)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || j === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1[i<span class=\"number\">-1</span>] === s2[j<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cur char equal means value plus</span></span><br><span class=\"line\">        dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// not equal means use front value</span></span><br><span class=\"line\">        dp[i][j] = <span class=\"built_in\">Math</span>.max(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> makeArray = <span class=\"function\">(<span class=\"params\">m, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    a.push([])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      a[i].push([])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = LCS(<span class=\"string\">'abcde'</span>, <span class=\"string\">'def'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"Longest-Common-Substring\">Longest Common Substring<a href=\"post/dp-lcs#Longest-Common-Substring\"></a></h2><p>问题描述：给定两个序列：X[1…m]和Y[1…n]，求在两个序列中同时出现的最长子串（要求连续）的长度。<br>假设 X 和 Y 的序列如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X[1...m] = &#123;A, B, C, B, D, A, B&#125;</span><br><span class=\"line\">Y[1...n] = &#123;B, D, C, A, B, A&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，X 和 Y 的最长公共子串有 “BD”，即长度为2。</p>\n<p>要求连续实际上是上一个问题的简化，意味着当子问题出现不符合条件的时候，那么此处的解就置为 0，也就是重新开始一个子序列，因此这样问题依赖的子问题数实际上也变少了，新的问题的值只依赖上一层的解，当不符合相等条件的时候，问题的解是 0。<br>这样我们可以进一步优化空间使用，将 m <em> n 的数组空间缩减为 m </em> 2 或者是 n * 2 （根据你外层循环来定），这里需要一点技巧，用取余运算来保存最后两行数据。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;string&#125; s1</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;string&#125; s2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> LCS = <span class=\"function\">(<span class=\"params\">s1, s2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = s1.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = s2.length</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxGol = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = [[], []]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// just use to line to save the dp value</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = (i + <span class=\"number\">2</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = (i + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s1[i] === s2[j]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || j === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          dp[cur][j] = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          dp[cur][j] = dp[pre][j<span class=\"number\">-1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dp[cur][j] = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      maxGol = <span class=\"built_in\">Math</span>.max(dp[cur][j], maxGol)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxGol</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = LCS(<span class=\"string\">'abcdxexxxf'</span>, <span class=\"string\">'def'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"Reference\">Reference<a href=\"post/dp-lcs#Reference\"></a></h2><p><a href=\"https://www.cnblogs.com/guolipa/p/10053551.html\" target=\"_blank\" rel=\"noopener\">Leetcode-Longest Common Substring(最长公共子字符串) - class0基础 - 博客园</a><br><a href=\"https://blog.csdn.net/u012426298/article/details/82796660\" target=\"_blank\" rel=\"noopener\">LeetCode-DP算法 | 最长公共子序列和最长公共子串区别 - 东南风的博客 - CSDN博客</a><br><a href=\"https://blog.csdn.net/lisonglisonglisong/article/details/41548557\" target=\"_blank\" rel=\"noopener\">【动态规划】Dynamic Programming - 神奕的专栏 - CSDN博客</a></p>\n","next":{"title":"如何优雅的在 Material UI 中使用 form","link":"post/arc-31"},"plink":"https://xkeith.space/post/dp-lcs/","toc":[{"title":"Longest Common Subsequence","id":"Longest-Common-Subsequence","index":"1"},{"title":"Longest Common Substring","id":"Longest-Common-Substring","index":"2"},{"title":"Reference","id":"Reference","index":"3"}]}