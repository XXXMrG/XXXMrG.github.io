{"title":"浅谈 React Fiber 架构","date":"2019-09-12T14:09:58.000Z","thumbnail":"https://i.loli.net/2019/09/12/IfZu6JB5D7d9mr4.png","color":"#111","link":"post/fiber","tags":["React"],"categories":["前端"],"updated":"2019-09-12T14:13:47.689Z","content":"<h2 id=\"What-is-Fiber\">What is Fiber ?<a href=\"post/fiber#What-is-Fiber\"></a></h2><p>“fiber” reconciler 是一个新尝试，致力于解决 stack reconciler 中固有的问题，同时解决一些历史遗留问题。Fiber 从 React 16 开始变成了默认的 reconciler。<br><a id=\"more\"></a><br>它的主要目标是：</p>\n<ul>\n<li>能够把可中断的任务切片处理。</li>\n<li>能够调整优先级，重置并复用任务。</li>\n<li>能够在父元素与子元素之间交错处理，以支持 React 中的布局。</li>\n<li>能够在render()中返回多个元素。</li>\n<li>更好地支持错误边界。</li>\n</ul>\n<p>这里列举 Fiber 的数据结构，仅截取部分重要属性。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A Fiber is work on a Component that needs to be done or was done. There can</span></span><br><span class=\"line\"><span class=\"comment\">// be more than one per component.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> type Fiber = &#123;|</span><br><span class=\"line\">  <span class=\"comment\">// These first fields are conceptually members of an Instance. This used to</span></span><br><span class=\"line\">  <span class=\"comment\">// be split into a separate type and intersected with the other Fiber fields,</span></span><br><span class=\"line\">  <span class=\"comment\">// but until Flow fixes its intersection bugs, we've merged them into a</span></span><br><span class=\"line\">  <span class=\"comment\">// single type.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// An Instance is shared between all versions of a component. We can easily</span></span><br><span class=\"line\">  <span class=\"comment\">// break this out into a separate object to avoid copying so much to the</span></span><br><span class=\"line\">  <span class=\"comment\">// alternate versions of the tree. We put this on a single object for now to</span></span><br><span class=\"line\">  <span class=\"comment\">// minimize the number of objects created during the initial render.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Tag identifying the type of fiber.</span></span><br><span class=\"line\">  tag: WorkTag,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Unique identifier of this child.</span></span><br><span class=\"line\">  key: <span class=\"literal\">null</span> | string,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The value of element.type which is used to preserve the identity during</span></span><br><span class=\"line\">  <span class=\"comment\">// reconciliation of this child.</span></span><br><span class=\"line\">  elementType: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The resolved function/class/ associated with this fiber.</span></span><br><span class=\"line\">  type: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The local state associated with this fiber.</span></span><br><span class=\"line\">  stateNode: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Conceptual aliases</span></span><br><span class=\"line\">  <span class=\"comment\">// parent : Instance -&gt; return The parent happens to be the same as the</span></span><br><span class=\"line\">  <span class=\"comment\">// return fiber since we've merged the fiber and instance.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Remaining fields belong to Fiber</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The Fiber to return to after finishing processing this one.</span></span><br><span class=\"line\">  <span class=\"comment\">// This is effectively the parent, but there can be multiple parents (two)</span></span><br><span class=\"line\">  <span class=\"comment\">// so this is only the parent of the thing we're currently processing.</span></span><br><span class=\"line\">  <span class=\"comment\">// It is conceptually the same as the return address of a stack frame.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>: Fiber | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Singly Linked List Tree Structure.</span></span><br><span class=\"line\">\t<span class=\"comment\">// return child sibling 子节点 兄弟节点 这些是将 Fiber tree 连接在一起的重要指针</span></span><br><span class=\"line\">  child: Fiber | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  sibling: Fiber | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  index: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The ref last used to attach this node.</span></span><br><span class=\"line\">  <span class=\"comment\">// I'll avoid adding an owner field for prod and model that as functions.</span></span><br><span class=\"line\">  ref: <span class=\"literal\">null</span> | <span class=\"function\">(<span class=\"params\">((handle: mixed</span>) =&gt;</span> <span class=\"keyword\">void</span>) &amp; &#123;<span class=\"attr\">_stringRef</span>: ?string&#125;) | RefObject,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Input is the data coming into process this fiber. Arguments. Props.</span></span><br><span class=\"line\">  pendingProps: any, <span class=\"comment\">// This type will be more specific once we overload the tag.</span></span><br><span class=\"line\">  memoizedProps: any, <span class=\"comment\">// The props used to create the output.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// A queue of state updates and callbacks.</span></span><br><span class=\"line\">  updateQueue: UpdateQueue&lt;any&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The state used to create the output</span></span><br><span class=\"line\">  memoizedState: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Dependencies (contexts, events) for this fiber, if it has any</span></span><br><span class=\"line\">  dependencies: Dependencies | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Bitfield that describes properties about the fiber and its subtree. E.g.</span></span><br><span class=\"line\">  <span class=\"comment\">// the ConcurrentMode flag indicates whether the subtree should be async-by-</span></span><br><span class=\"line\">  <span class=\"comment\">// default. When a fiber is created, it inherits the mode of its</span></span><br><span class=\"line\">  <span class=\"comment\">// parent. Additional flags can be set at creation time, but after that the</span></span><br><span class=\"line\">  <span class=\"comment\">// value should remain unchanged throughout the fiber's lifetime, particularly</span></span><br><span class=\"line\">  <span class=\"comment\">// before its child fibers are created.</span></span><br><span class=\"line\">  mode: TypeOfMode,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Effect</span></span><br><span class=\"line\">\t<span class=\"comment\">// 需要修改的 fiber 上打上这个 tag 来 trace 更新</span></span><br><span class=\"line\">\t<span class=\"comment\">// Effect list 是个链表来着 因此有了下面的这些操作</span></span><br><span class=\"line\">  effectTag: SideEffectTag,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Singly linked list fast path to the next fiber with side-effects.</span></span><br><span class=\"line\">  nextEffect: Fiber | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The first and last fiber with side-effect within this subtree. This allows</span></span><br><span class=\"line\">  <span class=\"comment\">// us to reuse a slice of the linked list when we reuse the work done within</span></span><br><span class=\"line\">  <span class=\"comment\">// this fiber.</span></span><br><span class=\"line\">  firstEffect: Fiber | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  lastEffect: Fiber | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Represents a time in the future by which this work should be completed.</span></span><br><span class=\"line\">  <span class=\"comment\">// Does not include work found in its subtree.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 用于计算优先级的重要变量</span></span><br><span class=\"line\">  expirationTime: ExpirationTime,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// This is used to quickly determine if a subtree has no pending changes.</span></span><br><span class=\"line\">  childExpirationTime: ExpirationTime,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// This is a pooled version of a Fiber. Every fiber that gets updated will</span></span><br><span class=\"line\">  <span class=\"comment\">// eventually have a pair. There are cases when we can clean up pairs to save</span></span><br><span class=\"line\">  <span class=\"comment\">// memory if we need to.</span></span><br><span class=\"line\">  <span class=\"comment\">// 版本控制和缓存 用于回滚</span></span><br><span class=\"line\">  alternate: Fiber | <span class=\"literal\">null</span>,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></div></figure>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/09/12/PCD4s6VXUNTMIr5.jpg\" alt=\"PCD4s6VXUNTMIr5.jpg\" data-zoomable></p></div>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/09/12/oepNQ8mZGEyxqnr.jpg\" alt=\"oepNQ8mZGEyxqnr.jpg\" data-zoomable></p></div>\n<h2 id=\"setState-内幕\">setState 内幕<a href=\"post/fiber#setState-内幕\"></a></h2><p>实际上引起 setState 的同步和异步更新的决定性原因是 React 的合成事件机制，它会将合成事件包裹中的 update 放到队列中批量更新，而没有经过合成事件处理的 setState 往往是同步执行的。</p>\n<div class=\"article-img\"><p><img src=\"https://i.loli.net/2019/09/12/q8jCgx9hSXYtlQy.png\" alt=\"q8jCgx9hSXYtlQy.png\" data-zoomable></p></div>\n<h2 id=\"Reference\">Reference<a href=\"post/fiber#Reference\"></a></h2><p><a href=\"https://youtu.be/ZCuYPiUIONs\" target=\"_blank\" rel=\"noopener\">Lin Clark - A Cartoon Intro to Fiber - React Conf 2017 - YouTube</a><br><a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"noopener\">GitHub - acdlite/react-fiber-architecture: A description of React’s new core algorithm, React Fiber</a><br><a href=\"https://www.w3.org/TR/requestidlecallback/\" target=\"_blank\" rel=\"noopener\">Cooperative Scheduling of Background Tasks</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">window.requestAnimationFrame - Web API 接口参考 | MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\" target=\"_blank\" rel=\"noopener\">requestIdleCallback - Web API 接口参考 | MDN</a><br><a href=\"http://www.sosout.com/2018/08/12/react-source-analysis.html\" target=\"_blank\" rel=\"noopener\">React 源码全方位剖析 | 每天一探</a><br><a href=\"https://juejin.im/post/5ab7b3a2f265da2378403e57\" target=\"_blank\" rel=\"noopener\">React Fiber - 掘金</a><br><a href=\"https://juejin.im/post/5b45c57c51882519790c7441\" target=\"_blank\" rel=\"noopener\">你真的理解setState吗？ - 掘金</a><br><a href=\"https://qianduan.group/posts/5cb1b0e49fd64d5a7458a981\" target=\"_blank\" rel=\"noopener\">【React深入】React事件机制-前端外刊评论</a></p>\n","next":{"title":"DP 之最长公共子序列和最长公共子串","link":"post/dp-lcs"},"plink":"https://xkeith.space/post/fiber/","toc":[{"title":"What is Fiber ?","id":"What-is-Fiber","index":"1"},{"title":"setState 内幕","id":"setState-内幕","index":"2"},{"title":"Reference","id":"Reference","index":"3"}]}