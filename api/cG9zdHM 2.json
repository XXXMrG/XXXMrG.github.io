{"per_page":10,"total":4,"current":1,"data":[{"title":"Hook 为王","date":"2019-09-19T07:45:51.000Z","thumbnail":"https://i.loli.net/2019/09/19/VrdfOolqFWbH5JG.png","color":"#FFFFFF","excerpt":"<h2 id=\"⚡️-Why-we-use-Hook\">⚡️ Why we use Hook<a href=\"post/react-hook#⚡️-Why-we-use-Hook\"></a></h2>","link":"post/react-hook","tags":["React"],"categories":["前端"]},{"title":"两种 worker： Web worker 和 Service worker","date":"2019-09-15T08:54:38.000Z","thumbnail":"https://i.loli.net/2019/09/15/UPSNVvZJXbKIqoQ.png","color":"#111","excerpt":"","link":"post/workers","tags":["workers"],"categories":["浏览器机制"]},{"title":"HTTP 1.1 & HTTP 2.0 & SPDY & QUIC","date":"2019-09-15T04:50:10.000Z","thumbnail":"https://i.loli.net/2019/09/15/H6dg32y9GnXcWm8.png","color":"#111","excerpt":"<h2 id=\"HTTP-1-1\">HTTP 1.1<a href=\"post/newHttp#HTTP-1-1\"></a></h2><ul>\n<li>引入更多缓存策略</li>\n<li>断点续传，range 头</li>\n<li>Host 头域来解决一个 IP 下多个虚拟主机的情况</li>\n<li>长链接</li></ul>","link":"post/newHttp","tags":["http"],"categories":["计算机网络"]},{"title":"浅谈 React Fiber 架构","date":"2019-09-12T14:09:58.000Z","thumbnail":"https://i.loli.net/2019/09/12/IfZu6JB5D7d9mr4.png","color":"#111","excerpt":"<h2 id=\"What-is-Fiber\">What is Fiber ?<a href=\"post/fiber#What-is-Fiber\"></a></h2><p>“fiber” reconciler 是一个新尝试，致力于解决 stack reconciler 中固有的问题，同时解决一些历史遗留问题。Fiber 从 React 16 开始变成了默认的 reconciler。<br></p>","link":"post/fiber","tags":["React"],"categories":["前端"]},{"title":"DP 之最长公共子序列和最长公共子串","date":"2019-09-05T11:31:23.000Z","thumbnail":"https://i.loli.net/2019/09/05/afINlDJcPYseSd6.png","color":"#111","excerpt":"<p>两个问题都是典型的 dp 问题，也就是整体的最优解依赖于子问题的最优解，同时子问题求解的过程中存在着问题重叠，意味着我们可以通过保存结果的方式来用空间换时间。<br>最长公共子串（Longest Common Substring）与最长公共子序列（Longest Common Subsequence）的区别： 子串要求在原字符串中是连续的，而子序列则只需保持相对顺序，并不要求连续。<br></p>","link":"post/dp-lcs","tags":["dp"],"categories":["算法"]},{"title":"如何优雅的在 Material UI 中使用 form","date":"2019-09-01T11:31:23.000Z","thumbnail":"https://i.loli.net/2019/09/01/jcRWLVpslxDwniX.png","color":"#111","excerpt":"<h2 id=\"你可能想问我为什么不直接用-antd-？\">你可能想问我为什么不直接用 antd ？<a href=\"post/arc-31#你可能想问我为什么不直接用-antd-？\"></a></h2><p>Material UI 可能在国内的公司和前端圈子里并不火热，因为他们有 antd，诚然 antd 确实是一套非常好的企业级解决方案，阿里也是这么为其定位的，但是其作为一个单纯的 UI 框架其实过于复杂了，过于封装了，会让使用者经常感觉到不自由，并且会让代码的重复度和 UI 的重复度过高，然而其实这个在企业级的后台管理系统中是好事，能够让风格和使用方法统一，降低学习成本。但是对于前端最重要的领域，也就是能够做出风格各异，功能差别很大的页面等场景，使用 antd 往往并非最好的选择，尤其是在 to C 产品中，你基本不可能看到 antd 的影子，而 MUI 在这方面做的却很好，只负责单元物料的风格统一，而如何组合，如何拓展和封装，则是完全交还给开发者，这也是 Material Design 的魅力所在，即使 Google 在他们的产品中大量使用该设计风格，你却很少会感觉到页面的单一和重复。<br></p>","link":"post/arc-31","tags":["React"],"categories":["前端"]},{"title":"函数式编程 in JavaScript","date":"2019-08-03T09:26:44.000Z","thumbnail":"https://i.loli.net/2019/08/04/V7loXmD21wbeiSC.jpg","color":"#111","excerpt":"<blockquote>\n<p>对我来说，重大演变还是向更加函数式的风格的发展，它使得我们放弃很多旧的习惯，并从一些面向对象思想中逐渐退出。  —— John Carmack</p>\n</blockquote>","link":"post/arc-30","tags":["JavaScript"],"categories":["前端"]},{"title":"看破 React-Router v4","date":"2019-07-18T13:21:56.000Z","thumbnail":"https://i.loli.net/2019/07/18/5d30829ceb6bb76611.png","color":"#111","excerpt":"<p>This guide’s purpose is to explain the mental model to have when using React Router. We call it “Dynamic Routing”, which is quite different from the “Static Routing” you’re probably more familiar with.<br></p>","link":"post/arc-29","tags":["React"],"categories":["前端"]},{"title":"Redux 哲学","date":"2019-07-16T14:05:53.000Z","thumbnail":"https://i.loli.net/2019/07/18/5d3071674179b49994.png","color":"#111","excerpt":"<p>Redux is a predictable state container for JavaScript apps.</p>\n<p>It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger.<br></p>","link":"post/arc-28","tags":["React"],"categories":["前端"]},{"title":"搞定 node","date":"2019-06-26T12:43:14.000Z","thumbnail":"https://i.loli.net/2019/06/26/5d1368c49367d72234.png","color":"#111","excerpt":"<blockquote>\n<p>一切能用 JavaScript 实现的软件都必有其 JavaScript 版本。</p>\n</blockquote>\n<p>我们要知道 node 并非一种语言，他仅仅是一种 JavaScript 执行环境，得益于 Google 的 v8 引擎的高性能，node 环境下的服务端在处理 IO 密集型任务的时候的效率相当的高，node 同样支持微服务架构。<br></p>","link":"post/arc-27","tags":["node"],"categories":["前端"]}]}